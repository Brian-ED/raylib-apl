:Namespace raylib
⍝ THIS TEXT HAS BEEN AUTOGENERATED

RAYLIB_VERSION_MAJOR ← 5     ⍝
RAYLIB_VERSION_MINOR ← 5     ⍝
RAYLIB_VERSION_PATCH ← 0     ⍝
RAYLIB_VERSION       ← '5.5' ⍝

:Namespace ConfigFlags ⍝ System/Window config flags
  FLAG_VSYNC_HINT               ← 64     ⍝ Set to try enabling V-Sync on GPU
  FLAG_FULLSCREEN_MODE          ← 2      ⍝ Set to run program in fullscreen
  FLAG_WINDOW_RESIZABLE         ← 4      ⍝ Set to allow resizable window
  FLAG_WINDOW_UNDECORATED       ← 8      ⍝ Set to disable window decoration (frame and buttons)
  FLAG_WINDOW_HIDDEN            ← 128    ⍝ Set to hide window
  FLAG_WINDOW_MINIMIZED         ← 512    ⍝ Set to minimize window (iconify)
  FLAG_WINDOW_MAXIMIZED         ← 1024   ⍝ Set to maximize window (expanded to monitor)
  FLAG_WINDOW_UNFOCUSED         ← 2048   ⍝ Set to window non focused
  FLAG_WINDOW_TOPMOST           ← 4096   ⍝ Set to window always on top
  FLAG_WINDOW_ALWAYS_RUN        ← 256    ⍝ Set to allow windows running while minimized
  FLAG_WINDOW_TRANSPARENT       ← 16     ⍝ Set to allow transparent framebuffer
  FLAG_WINDOW_HIGHDPI           ← 8192   ⍝ Set to support HighDPI
  FLAG_WINDOW_MOUSE_PASSTHROUGH ← 16384  ⍝ Set to support mouse passthrough, only supported when FLAG_WINDOW_UNDECORATED
  FLAG_BORDERLESS_WINDOWED_MODE ← 32768  ⍝ Set to run program in borderless windowed mode
  FLAG_MSAA_4X_HINT             ← 32     ⍝ Set to try enabling MSAA 4X
  FLAG_INTERLACED_HINT          ← 65536  ⍝ Set to try enabling interlaced video format (for V3D)
:EndNamespace

:Namespace TraceLogLevel ⍝ Trace log level
  LOG_ALL     ← 0  ⍝ Display all logs
  LOG_TRACE   ← 1  ⍝ Trace logging, intended for internal use only
  LOG_DEBUG   ← 2  ⍝ Debug logging, used for internal debugging, it should be disabled on release builds
  LOG_INFO    ← 3  ⍝ Info logging, used for program execution info
  LOG_WARNING ← 4  ⍝ Warning logging, used on recoverable failures
  LOG_ERROR   ← 5  ⍝ Error logging, used on unrecoverable failures
  LOG_FATAL   ← 6  ⍝ Fatal logging, used to abort program: exit(EXIT_FAILURE)
  LOG_NONE    ← 7  ⍝ Disable logging
:EndNamespace

:Namespace KeyboardKey ⍝ Keyboard keys (US keyboard layout)
  KEY_NULL          ← 0    ⍝ Key: NULL, used for no key pressed
  KEY_APOSTROPHE    ← 39   ⍝ Key: '
  KEY_COMMA         ← 44   ⍝ Key: ,
  KEY_MINUS         ← 45   ⍝ Key: -
  KEY_PERIOD        ← 46   ⍝ Key: .
  KEY_SLASH         ← 47   ⍝ Key: /
  KEY_ZERO          ← 48   ⍝ Key: 0
  KEY_ONE           ← 49   ⍝ Key: 1
  KEY_TWO           ← 50   ⍝ Key: 2
  KEY_THREE         ← 51   ⍝ Key: 3
  KEY_FOUR          ← 52   ⍝ Key: 4
  KEY_FIVE          ← 53   ⍝ Key: 5
  KEY_SIX           ← 54   ⍝ Key: 6
  KEY_SEVEN         ← 55   ⍝ Key: 7
  KEY_EIGHT         ← 56   ⍝ Key: 8
  KEY_NINE          ← 57   ⍝ Key: 9
  KEY_SEMICOLON     ← 59   ⍝ Key: ;
  KEY_EQUAL         ← 61   ⍝ Key: =
  KEY_A             ← 65   ⍝ Key: A | a
  KEY_B             ← 66   ⍝ Key: B | b
  KEY_C             ← 67   ⍝ Key: C | c
  KEY_D             ← 68   ⍝ Key: D | d
  KEY_E             ← 69   ⍝ Key: E | e
  KEY_F             ← 70   ⍝ Key: F | f
  KEY_G             ← 71   ⍝ Key: G | g
  KEY_H             ← 72   ⍝ Key: H | h
  KEY_I             ← 73   ⍝ Key: I | i
  KEY_J             ← 74   ⍝ Key: J | j
  KEY_K             ← 75   ⍝ Key: K | k
  KEY_L             ← 76   ⍝ Key: L | l
  KEY_M             ← 77   ⍝ Key: M | m
  KEY_N             ← 78   ⍝ Key: N | n
  KEY_O             ← 79   ⍝ Key: O | o
  KEY_P             ← 80   ⍝ Key: P | p
  KEY_Q             ← 81   ⍝ Key: Q | q
  KEY_R             ← 82   ⍝ Key: R | r
  KEY_S             ← 83   ⍝ Key: S | s
  KEY_T             ← 84   ⍝ Key: T | t
  KEY_U             ← 85   ⍝ Key: U | u
  KEY_V             ← 86   ⍝ Key: V | v
  KEY_W             ← 87   ⍝ Key: W | w
  KEY_X             ← 88   ⍝ Key: X | x
  KEY_Y             ← 89   ⍝ Key: Y | y
  KEY_Z             ← 90   ⍝ Key: Z | z
  KEY_LEFT_BRACKET  ← 91   ⍝ Key: [
  KEY_BACKSLASH     ← 92   ⍝ Key: '\'
  KEY_RIGHT_BRACKET ← 93   ⍝ Key: ]
  KEY_GRAVE         ← 96   ⍝ Key: `
  KEY_SPACE         ← 32   ⍝ Key: Space
  KEY_ESCAPE        ← 256  ⍝ Key: Esc
  KEY_ENTER         ← 257  ⍝ Key: Enter
  KEY_TAB           ← 258  ⍝ Key: Tab
  KEY_BACKSPACE     ← 259  ⍝ Key: Backspace
  KEY_INSERT        ← 260  ⍝ Key: Ins
  KEY_DELETE        ← 261  ⍝ Key: Del
  KEY_RIGHT         ← 262  ⍝ Key: Cursor right
  KEY_LEFT          ← 263  ⍝ Key: Cursor left
  KEY_DOWN          ← 264  ⍝ Key: Cursor down
  KEY_UP            ← 265  ⍝ Key: Cursor up
  KEY_PAGE_UP       ← 266  ⍝ Key: Page up
  KEY_PAGE_DOWN     ← 267  ⍝ Key: Page down
  KEY_HOME          ← 268  ⍝ Key: Home
  KEY_END           ← 269  ⍝ Key: End
  KEY_CAPS_LOCK     ← 280  ⍝ Key: Caps lock
  KEY_SCROLL_LOCK   ← 281  ⍝ Key: Scroll down
  KEY_NUM_LOCK      ← 282  ⍝ Key: Num lock
  KEY_PRINT_SCREEN  ← 283  ⍝ Key: Print screen
  KEY_PAUSE         ← 284  ⍝ Key: Pause
  KEY_F1            ← 290  ⍝ Key: F1
  KEY_F2            ← 291  ⍝ Key: F2
  KEY_F3            ← 292  ⍝ Key: F3
  KEY_F4            ← 293  ⍝ Key: F4
  KEY_F5            ← 294  ⍝ Key: F5
  KEY_F6            ← 295  ⍝ Key: F6
  KEY_F7            ← 296  ⍝ Key: F7
  KEY_F8            ← 297  ⍝ Key: F8
  KEY_F9            ← 298  ⍝ Key: F9
  KEY_F10           ← 299  ⍝ Key: F10
  KEY_F11           ← 300  ⍝ Key: F11
  KEY_F12           ← 301  ⍝ Key: F12
  KEY_LEFT_SHIFT    ← 340  ⍝ Key: Shift left
  KEY_LEFT_CONTROL  ← 341  ⍝ Key: Control left
  KEY_LEFT_ALT      ← 342  ⍝ Key: Alt left
  KEY_LEFT_SUPER    ← 343  ⍝ Key: Super left
  KEY_RIGHT_SHIFT   ← 344  ⍝ Key: Shift right
  KEY_RIGHT_CONTROL ← 345  ⍝ Key: Control right
  KEY_RIGHT_ALT     ← 346  ⍝ Key: Alt right
  KEY_RIGHT_SUPER   ← 347  ⍝ Key: Super right
  KEY_KB_MENU       ← 348  ⍝ Key: KB menu
  KEY_KP_0          ← 320  ⍝ Key: Keypad 0
  KEY_KP_1          ← 321  ⍝ Key: Keypad 1
  KEY_KP_2          ← 322  ⍝ Key: Keypad 2
  KEY_KP_3          ← 323  ⍝ Key: Keypad 3
  KEY_KP_4          ← 324  ⍝ Key: Keypad 4
  KEY_KP_5          ← 325  ⍝ Key: Keypad 5
  KEY_KP_6          ← 326  ⍝ Key: Keypad 6
  KEY_KP_7          ← 327  ⍝ Key: Keypad 7
  KEY_KP_8          ← 328  ⍝ Key: Keypad 8
  KEY_KP_9          ← 329  ⍝ Key: Keypad 9
  KEY_KP_DECIMAL    ← 330  ⍝ Key: Keypad .
  KEY_KP_DIVIDE     ← 331  ⍝ Key: Keypad /
  KEY_KP_MULTIPLY   ← 332  ⍝ Key: Keypad *
  KEY_KP_SUBTRACT   ← 333  ⍝ Key: Keypad -
  KEY_KP_ADD        ← 334  ⍝ Key: Keypad +
  KEY_KP_ENTER      ← 335  ⍝ Key: Keypad Enter
  KEY_KP_EQUAL      ← 336  ⍝ Key: Keypad =
  KEY_BACK          ← 4    ⍝ Key: Android back button
  KEY_MENU          ← 5    ⍝ Key: Android menu button
  KEY_VOLUME_UP     ← 24   ⍝ Key: Android volume up button
  KEY_VOLUME_DOWN   ← 25   ⍝ Key: Android volume down button
:EndNamespace

:Namespace MouseButton ⍝ Mouse buttons
  MOUSE_BUTTON_LEFT    ← 0  ⍝ Mouse button left
  MOUSE_BUTTON_RIGHT   ← 1  ⍝ Mouse button right
  MOUSE_BUTTON_MIDDLE  ← 2  ⍝ Mouse button middle (pressed wheel)
  MOUSE_BUTTON_SIDE    ← 3  ⍝ Mouse button side (advanced mouse device)
  MOUSE_BUTTON_EXTRA   ← 4  ⍝ Mouse button extra (advanced mouse device)
  MOUSE_BUTTON_FORWARD ← 5  ⍝ Mouse button forward (advanced mouse device)
  MOUSE_BUTTON_BACK    ← 6  ⍝ Mouse button back (advanced mouse device)
:EndNamespace

:Namespace MouseCursor ⍝ Mouse cursor
  MOUSE_CURSOR_DEFAULT       ← 0   ⍝ Default pointer shape
  MOUSE_CURSOR_ARROW         ← 1   ⍝ Arrow shape
  MOUSE_CURSOR_IBEAM         ← 2   ⍝ Text writing cursor shape
  MOUSE_CURSOR_CROSSHAIR     ← 3   ⍝ Cross shape
  MOUSE_CURSOR_POINTING_HAND ← 4   ⍝ Pointing hand cursor
  MOUSE_CURSOR_RESIZE_EW     ← 5   ⍝ Horizontal resize/move arrow shape
  MOUSE_CURSOR_RESIZE_NS     ← 6   ⍝ Vertical resize/move arrow shape
  MOUSE_CURSOR_RESIZE_NWSE   ← 7   ⍝ Top-left to bottom-right diagonal resize/move arrow shape
  MOUSE_CURSOR_RESIZE_NESW   ← 8   ⍝ The top-right to bottom-left diagonal resize/move arrow shape
  MOUSE_CURSOR_RESIZE_ALL    ← 9   ⍝ The omnidirectional resize/move cursor shape
  MOUSE_CURSOR_NOT_ALLOWED   ← 10  ⍝ The operation-not-allowed shape
:EndNamespace

:Namespace GamepadButton ⍝ Gamepad buttons
  GAMEPAD_BUTTON_UNKNOWN          ← 0   ⍝ Unknown button, just for error checking
  GAMEPAD_BUTTON_LEFT_FACE_UP     ← 1   ⍝ Gamepad left DPAD up button
  GAMEPAD_BUTTON_LEFT_FACE_RIGHT  ← 2   ⍝ Gamepad left DPAD right button
  GAMEPAD_BUTTON_LEFT_FACE_DOWN   ← 3   ⍝ Gamepad left DPAD down button
  GAMEPAD_BUTTON_LEFT_FACE_LEFT   ← 4   ⍝ Gamepad left DPAD left button
  GAMEPAD_BUTTON_RIGHT_FACE_UP    ← 5   ⍝ Gamepad right button up (i.e. PS3: Triangle, Xbox: Y)
  GAMEPAD_BUTTON_RIGHT_FACE_RIGHT ← 6   ⍝ Gamepad right button right (i.e. PS3: Circle, Xbox: B)
  GAMEPAD_BUTTON_RIGHT_FACE_DOWN  ← 7   ⍝ Gamepad right button down (i.e. PS3: Cross, Xbox: A)
  GAMEPAD_BUTTON_RIGHT_FACE_LEFT  ← 8   ⍝ Gamepad right button left (i.e. PS3: Square, Xbox: X)
  GAMEPAD_BUTTON_LEFT_TRIGGER_1   ← 9   ⍝ Gamepad top/back trigger left (first), it could be a trailing button
  GAMEPAD_BUTTON_LEFT_TRIGGER_2   ← 10  ⍝ Gamepad top/back trigger left (second), it could be a trailing button
  GAMEPAD_BUTTON_RIGHT_TRIGGER_1  ← 11  ⍝ Gamepad top/back trigger right (first), it could be a trailing button
  GAMEPAD_BUTTON_RIGHT_TRIGGER_2  ← 12  ⍝ Gamepad top/back trigger right (second), it could be a trailing button
  GAMEPAD_BUTTON_MIDDLE_LEFT      ← 13  ⍝ Gamepad center buttons, left one (i.e. PS3: Select)
  GAMEPAD_BUTTON_MIDDLE           ← 14  ⍝ Gamepad center buttons, middle one (i.e. PS3: PS, Xbox: XBOX)
  GAMEPAD_BUTTON_MIDDLE_RIGHT     ← 15  ⍝ Gamepad center buttons, right one (i.e. PS3: Start)
  GAMEPAD_BUTTON_LEFT_THUMB       ← 16  ⍝ Gamepad joystick pressed button left
  GAMEPAD_BUTTON_RIGHT_THUMB      ← 17  ⍝ Gamepad joystick pressed button right
:EndNamespace

:Namespace GamepadAxis ⍝ Gamepad axis
  GAMEPAD_AXIS_LEFT_X        ← 0  ⍝ Gamepad left stick X axis
  GAMEPAD_AXIS_LEFT_Y        ← 1  ⍝ Gamepad left stick Y axis
  GAMEPAD_AXIS_RIGHT_X       ← 2  ⍝ Gamepad right stick X axis
  GAMEPAD_AXIS_RIGHT_Y       ← 3  ⍝ Gamepad right stick Y axis
  GAMEPAD_AXIS_LEFT_TRIGGER  ← 4  ⍝ Gamepad back trigger left, pressure level: [1..-1]
  GAMEPAD_AXIS_RIGHT_TRIGGER ← 5  ⍝ Gamepad back trigger right, pressure level: [1..-1]
:EndNamespace

:Namespace MaterialMapIndex ⍝ Material map index
  MATERIAL_MAP_ALBEDO     ← 0   ⍝ Albedo material (same as: MATERIAL_MAP_DIFFUSE)
  MATERIAL_MAP_METALNESS  ← 1   ⍝ Metalness material (same as: MATERIAL_MAP_SPECULAR)
  MATERIAL_MAP_NORMAL     ← 2   ⍝ Normal material
  MATERIAL_MAP_ROUGHNESS  ← 3   ⍝ Roughness material
  MATERIAL_MAP_OCCLUSION  ← 4   ⍝ Ambient occlusion material
  MATERIAL_MAP_EMISSION   ← 5   ⍝ Emission material
  MATERIAL_MAP_HEIGHT     ← 6   ⍝ Heightmap material
  MATERIAL_MAP_CUBEMAP    ← 7   ⍝ Cubemap material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  MATERIAL_MAP_IRRADIANCE ← 8   ⍝ Irradiance material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  MATERIAL_MAP_PREFILTER  ← 9   ⍝ Prefilter material (NOTE: Uses GL_TEXTURE_CUBE_MAP)
  MATERIAL_MAP_BRDF       ← 10  ⍝ Brdf material
:EndNamespace

:Namespace ShaderLocationIndex ⍝ Shader location index
  SHADER_LOC_VERTEX_POSITION    ← 0   ⍝ Shader location: vertex attribute: position
  SHADER_LOC_VERTEX_TEXCOORD01  ← 1   ⍝ Shader location: vertex attribute: texcoord01
  SHADER_LOC_VERTEX_TEXCOORD02  ← 2   ⍝ Shader location: vertex attribute: texcoord02
  SHADER_LOC_VERTEX_NORMAL      ← 3   ⍝ Shader location: vertex attribute: normal
  SHADER_LOC_VERTEX_TANGENT     ← 4   ⍝ Shader location: vertex attribute: tangent
  SHADER_LOC_VERTEX_COLOR       ← 5   ⍝ Shader location: vertex attribute: color
  SHADER_LOC_MATRIX_MVP         ← 6   ⍝ Shader location: matrix uniform: model-view-projection
  SHADER_LOC_MATRIX_VIEW        ← 7   ⍝ Shader location: matrix uniform: view (camera transform)
  SHADER_LOC_MATRIX_PROJECTION  ← 8   ⍝ Shader location: matrix uniform: projection
  SHADER_LOC_MATRIX_MODEL       ← 9   ⍝ Shader location: matrix uniform: model (transform)
  SHADER_LOC_MATRIX_NORMAL      ← 10  ⍝ Shader location: matrix uniform: normal
  SHADER_LOC_VECTOR_VIEW        ← 11  ⍝ Shader location: vector uniform: view
  SHADER_LOC_COLOR_DIFFUSE      ← 12  ⍝ Shader location: vector uniform: diffuse color
  SHADER_LOC_COLOR_SPECULAR     ← 13  ⍝ Shader location: vector uniform: specular color
  SHADER_LOC_COLOR_AMBIENT      ← 14  ⍝ Shader location: vector uniform: ambient color
  SHADER_LOC_MAP_ALBEDO         ← 15  ⍝ Shader location: sampler2d texture: albedo (same as: SHADER_LOC_MAP_DIFFUSE)
  SHADER_LOC_MAP_METALNESS      ← 16  ⍝ Shader location: sampler2d texture: metalness (same as: SHADER_LOC_MAP_SPECULAR)
  SHADER_LOC_MAP_NORMAL         ← 17  ⍝ Shader location: sampler2d texture: normal
  SHADER_LOC_MAP_ROUGHNESS      ← 18  ⍝ Shader location: sampler2d texture: roughness
  SHADER_LOC_MAP_OCCLUSION      ← 19  ⍝ Shader location: sampler2d texture: occlusion
  SHADER_LOC_MAP_EMISSION       ← 20  ⍝ Shader location: sampler2d texture: emission
  SHADER_LOC_MAP_HEIGHT         ← 21  ⍝ Shader location: sampler2d texture: height
  SHADER_LOC_MAP_CUBEMAP        ← 22  ⍝ Shader location: samplerCube texture: cubemap
  SHADER_LOC_MAP_IRRADIANCE     ← 23  ⍝ Shader location: samplerCube texture: irradiance
  SHADER_LOC_MAP_PREFILTER      ← 24  ⍝ Shader location: samplerCube texture: prefilter
  SHADER_LOC_MAP_BRDF           ← 25  ⍝ Shader location: sampler2d texture: brdf
  SHADER_LOC_VERTEX_BONEIDS     ← 26  ⍝ Shader location: vertex attribute: boneIds
  SHADER_LOC_VERTEX_BONEWEIGHTS ← 27  ⍝ Shader location: vertex attribute: boneWeights
  SHADER_LOC_BONE_MATRICES      ← 28  ⍝ Shader location: array of matrices uniform: boneMatrices
:EndNamespace

:Namespace ShaderUniformDataType ⍝ Shader uniform data type
  SHADER_UNIFORM_FLOAT     ← 0  ⍝ Shader uniform type: float
  SHADER_UNIFORM_VEC2      ← 1  ⍝ Shader uniform type: vec2 (2 float)
  SHADER_UNIFORM_VEC3      ← 2  ⍝ Shader uniform type: vec3 (3 float)
  SHADER_UNIFORM_VEC4      ← 3  ⍝ Shader uniform type: vec4 (4 float)
  SHADER_UNIFORM_INT       ← 4  ⍝ Shader uniform type: int
  SHADER_UNIFORM_IVEC2     ← 5  ⍝ Shader uniform type: ivec2 (2 int)
  SHADER_UNIFORM_IVEC3     ← 6  ⍝ Shader uniform type: ivec3 (3 int)
  SHADER_UNIFORM_IVEC4     ← 7  ⍝ Shader uniform type: ivec4 (4 int)
  SHADER_UNIFORM_SAMPLER2D ← 8  ⍝ Shader uniform type: sampler2d
:EndNamespace

:Namespace ShaderAttributeDataType ⍝ Shader attribute data types
  SHADER_ATTRIB_FLOAT ← 0  ⍝ Shader attribute type: float
  SHADER_ATTRIB_VEC2  ← 1  ⍝ Shader attribute type: vec2 (2 float)
  SHADER_ATTRIB_VEC3  ← 2  ⍝ Shader attribute type: vec3 (3 float)
  SHADER_ATTRIB_VEC4  ← 3  ⍝ Shader attribute type: vec4 (4 float)
:EndNamespace

:Namespace PixelFormat ⍝ Pixel formats
  PIXELFORMAT_UNCOMPRESSED_GRAYSCALE    ← 1   ⍝ 8 bit per pixel (no alpha)
  PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   ← 2   ⍝ 8*2 bpp (2 channels)
  PIXELFORMAT_UNCOMPRESSED_R5G6B5       ← 3   ⍝ 16 bpp
  PIXELFORMAT_UNCOMPRESSED_R8G8B8       ← 4   ⍝ 24 bpp
  PIXELFORMAT_UNCOMPRESSED_R5G5B5A1     ← 5   ⍝ 16 bpp (1 bit alpha)
  PIXELFORMAT_UNCOMPRESSED_R4G4B4A4     ← 6   ⍝ 16 bpp (4 bit alpha)
  PIXELFORMAT_UNCOMPRESSED_R8G8B8A8     ← 7   ⍝ 32 bpp
  PIXELFORMAT_UNCOMPRESSED_R32          ← 8   ⍝ 32 bpp (1 channel - float)
  PIXELFORMAT_UNCOMPRESSED_R32G32B32    ← 9   ⍝ 32*3 bpp (3 channels - float)
  PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 ← 10  ⍝ 32*4 bpp (4 channels - float)
  PIXELFORMAT_UNCOMPRESSED_R16          ← 11  ⍝ 16 bpp (1 channel - half float)
  PIXELFORMAT_UNCOMPRESSED_R16G16B16    ← 12  ⍝ 16*3 bpp (3 channels - half float)
  PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 ← 13  ⍝ 16*4 bpp (4 channels - half float)
  PIXELFORMAT_COMPRESSED_DXT1_RGB       ← 14  ⍝ 4 bpp (no alpha)
  PIXELFORMAT_COMPRESSED_DXT1_RGBA      ← 15  ⍝ 4 bpp (1 bit alpha)
  PIXELFORMAT_COMPRESSED_DXT3_RGBA      ← 16  ⍝ 8 bpp
  PIXELFORMAT_COMPRESSED_DXT5_RGBA      ← 17  ⍝ 8 bpp
  PIXELFORMAT_COMPRESSED_ETC1_RGB       ← 18  ⍝ 4 bpp
  PIXELFORMAT_COMPRESSED_ETC2_RGB       ← 19  ⍝ 4 bpp
  PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  ← 20  ⍝ 8 bpp
  PIXELFORMAT_COMPRESSED_PVRT_RGB       ← 21  ⍝ 4 bpp
  PIXELFORMAT_COMPRESSED_PVRT_RGBA      ← 22  ⍝ 4 bpp
  PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  ← 23  ⍝ 8 bpp
  PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  ← 24  ⍝ 2 bpp
:EndNamespace

:Namespace TextureFilter ⍝ Texture parameters: filter mode
  TEXTURE_FILTER_POINT           ← 0  ⍝ No filter, just pixel approximation
  TEXTURE_FILTER_BILINEAR        ← 1  ⍝ Linear filtering
  TEXTURE_FILTER_TRILINEAR       ← 2  ⍝ Trilinear filtering (linear with mipmaps)
  TEXTURE_FILTER_ANISOTROPIC_4X  ← 3  ⍝ Anisotropic filtering 4x
  TEXTURE_FILTER_ANISOTROPIC_8X  ← 4  ⍝ Anisotropic filtering 8x
  TEXTURE_FILTER_ANISOTROPIC_16X ← 5  ⍝ Anisotropic filtering 16x
:EndNamespace

:Namespace TextureWrap ⍝ Texture parameters: wrap mode
  TEXTURE_WRAP_REPEAT        ← 0  ⍝ Repeats texture in tiled mode
  TEXTURE_WRAP_CLAMP         ← 1  ⍝ Clamps texture to edge pixel in tiled mode
  TEXTURE_WRAP_MIRROR_REPEAT ← 2  ⍝ Mirrors and repeats the texture in tiled mode
  TEXTURE_WRAP_MIRROR_CLAMP  ← 3  ⍝ Mirrors and clamps to border the texture in tiled mode
:EndNamespace

:Namespace CubemapLayout ⍝ Cubemap layouts
  CUBEMAP_LAYOUT_AUTO_DETECT         ← 0  ⍝ Automatically detect layout type
  CUBEMAP_LAYOUT_LINE_VERTICAL       ← 1  ⍝ Layout is defined by a vertical line with faces
  CUBEMAP_LAYOUT_LINE_HORIZONTAL     ← 2  ⍝ Layout is defined by a horizontal line with faces
  CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR ← 3  ⍝ Layout is defined by a 3x4 cross with cubemap faces
  CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE ← 4  ⍝ Layout is defined by a 4x3 cross with cubemap faces
:EndNamespace

:Namespace FontType ⍝ Font type, defines generation method
  FONT_DEFAULT ← 0  ⍝ Default font generation, anti-aliased
  FONT_BITMAP  ← 1  ⍝ Bitmap font generation, no anti-aliasing
  FONT_SDF     ← 2  ⍝ SDF font generation, requires external shader
:EndNamespace

:Namespace BlendMode ⍝ Color blending modes (pre-defined)
  BLEND_ALPHA             ← 0  ⍝ Blend textures considering alpha (default)
  BLEND_ADDITIVE          ← 1  ⍝ Blend textures adding colors
  BLEND_MULTIPLIED        ← 2  ⍝ Blend textures multiplying colors
  BLEND_ADD_COLORS        ← 3  ⍝ Blend textures adding colors (alternative)
  BLEND_SUBTRACT_COLORS   ← 4  ⍝ Blend textures subtracting colors (alternative)
  BLEND_ALPHA_PREMULTIPLY ← 5  ⍝ Blend premultiplied textures considering alpha
  BLEND_CUSTOM            ← 6  ⍝ Blend textures using custom src/dst factors (use rlSetBlendFactors())
  BLEND_CUSTOM_SEPARATE   ← 7  ⍝ Blend textures using custom rgb/alpha separate src/dst factors (use rlSetBlendFactorsSeparate())
:EndNamespace

:Namespace Gesture ⍝ Gesture
  GESTURE_NONE        ← 0    ⍝ No gesture
  GESTURE_TAP         ← 1    ⍝ Tap gesture
  GESTURE_DOUBLETAP   ← 2    ⍝ Double tap gesture
  GESTURE_HOLD        ← 4    ⍝ Hold gesture
  GESTURE_DRAG        ← 8    ⍝ Drag gesture
  GESTURE_SWIPE_RIGHT ← 16   ⍝ Swipe right gesture
  GESTURE_SWIPE_LEFT  ← 32   ⍝ Swipe left gesture
  GESTURE_SWIPE_UP    ← 64   ⍝ Swipe up gesture
  GESTURE_SWIPE_DOWN  ← 128  ⍝ Swipe down gesture
  GESTURE_PINCH_IN    ← 256  ⍝ Pinch in gesture
  GESTURE_PINCH_OUT   ← 512  ⍝ Pinch out gesture
:EndNamespace

:Namespace CameraMode ⍝ Camera system modes
  CAMERA_CUSTOM       ← 0  ⍝ Camera custom, controlled by user (UpdateCamera() does nothing)
  CAMERA_FREE         ← 1  ⍝ Camera free mode
  CAMERA_ORBITAL      ← 2  ⍝ Camera orbital, around target, zoom supported
  CAMERA_FIRST_PERSON ← 3  ⍝ Camera first person
  CAMERA_THIRD_PERSON ← 4  ⍝ Camera third person
:EndNamespace

:Namespace CameraProjection ⍝ Camera projection
  CAMERA_PERSPECTIVE  ← 0  ⍝ Perspective projection
  CAMERA_ORTHOGRAPHIC ← 1  ⍝ Orthographic projection
:EndNamespace

:Namespace NPatchLayout ⍝ N-patch layout
  NPATCH_NINE_PATCH             ← 0  ⍝ Npatch layout: 3x3 tiles
  NPATCH_THREE_PATCH_VERTICAL   ← 1  ⍝ Npatch layout: 1x3 tiles
  NPATCH_THREE_PATCH_HORIZONTAL ← 2  ⍝ Npatch layout: 3x1 tiles
:EndNamespace


bool ← 'I1'
c    ← 'I1'
i    ← 'I4'
f    ← 'F4'
u    ← 'U4'
i1   ← 'I1'
u1   ← 'U1'
u8   ← 'U8'
ptr  ← ,'P'
f8   ← 'F8'
i8   ← 'I8'
u2   ← 'U2'
ustr ← '=C1'
str  ← '=0C1'

v2 ← ⍬ ⍝ Vector2, 2 components
  v2,←⊂ '⋄Vector2' ⍝    ⍝
  v2,←⊂ f          ⍝ x  ⍝ Vector x component
  v2,←⊂ f          ⍝ y  ⍝ Vector y component

v3 ← ⍬ ⍝ Vector3, 3 components
  v3,←⊂ '⋄Vector3' ⍝    ⍝
  v3,←⊂ f          ⍝ x  ⍝ Vector x component
  v3,←⊂ f          ⍝ y  ⍝ Vector y component
  v3,←⊂ f          ⍝ z  ⍝ Vector z component

v4 ← ⍬ ⍝ Vector4, 4 components
  v4,←⊂ '⋄Vector4' ⍝    ⍝
  v4,←⊂ f          ⍝ x  ⍝ Vector x component
  v4,←⊂ f          ⍝ y  ⍝ Vector y component
  v4,←⊂ f          ⍝ z  ⍝ Vector z component
  v4,←⊂ f          ⍝ w  ⍝ Vector w component
Quaternion ← v4 ⍝ Quaternion, 4 components (Vector4 alias)

Matrix ← ⍬ ⍝ Matrix, 4x4 components, column major, OpenGL style, right-handed
  Matrix,←⊂ '⋄Matrix' ⍝      ⍝
  Matrix,←⊂ f         ⍝ m0   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m4   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m8   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m12  ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m1   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m5   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m9   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m13  ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m2   ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m6   ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m10  ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m14  ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m3   ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f         ⍝ m7   ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f         ⍝ m11  ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f         ⍝ m15  ⍝ Matrix fourth row (4 components)

Color ← ⍬ ⍝ Color, 4 components, R8G8B8A8 (32bit)
  Color,←⊂ '⋄Color' ⍝    ⍝
  Color,←⊂ u1       ⍝ r  ⍝ Color red value
  Color,←⊂ u1       ⍝ g  ⍝ Color green value
  Color,←⊂ u1       ⍝ b  ⍝ Color blue value
  Color,←⊂ u1       ⍝ a  ⍝ Color alpha value

Rectangle ← ⍬ ⍝ Rectangle, 4 components
  Rectangle,←⊂ '⋄Rectangle' ⍝         ⍝
  Rectangle,←⊂ f            ⍝ x       ⍝ Rectangle top-left corner position x
  Rectangle,←⊂ f            ⍝ y       ⍝ Rectangle top-left corner position y
  Rectangle,←⊂ f            ⍝ width   ⍝ Rectangle width
  Rectangle,←⊂ f            ⍝ height  ⍝ Rectangle height

Image ← ⍬ ⍝ Image, pixel data stored in CPU memory (RAM)
  Image,←⊂ '⋄Image' ⍝          ⍝
  Image,←⊂ ptr      ⍝ data     ⍝ Image raw data
  Image,←⊂ i        ⍝ width    ⍝ Image base width
  Image,←⊂ i        ⍝ height   ⍝ Image base height
  Image,←⊂ i        ⍝ mipmaps  ⍝ Mipmap levels, 1 by default
  Image,←⊂ i        ⍝ format   ⍝ Data format (PixelFormat type)

Texture ← ⍬ ⍝ Texture, tex data stored in GPU memory (VRAM)
  Texture,←⊂ '⋄Texture' ⍝          ⍝
  Texture,←⊂ u          ⍝ id       ⍝ OpenGL texture id
  Texture,←⊂ i          ⍝ width    ⍝ Texture base width
  Texture,←⊂ i          ⍝ height   ⍝ Texture base height
  Texture,←⊂ i          ⍝ mipmaps  ⍝ Mipmap levels, 1 by default
  Texture,←⊂ i          ⍝ format   ⍝ Data format (PixelFormat type)
Texture2D ← Texture ⍝ Texture2D, same as Texture
TextureCubemap ← Texture ⍝ TextureCubemap, same as Texture

RenderTexture ← ⍬ ⍝ RenderTexture, fbo for texture rendering
  RenderTexture,←⊂ '⋄RenderTexture' ⍝          ⍝
  RenderTexture,←⊂ u                ⍝ id       ⍝ OpenGL framebuffer object id
  RenderTexture,←⊂ Texture          ⍝ texture  ⍝ Color buffer attachment texture
  RenderTexture,←⊂ Texture          ⍝ depth    ⍝ Depth buffer attachment texture
RenderTexture2D ← RenderTexture ⍝ RenderTexture2D, same as RenderTexture

NPatchInfo ← ⍬ ⍝ NPatchInfo, n-patch layout info
  NPatchInfo,←⊂ '⋄NPatchInfo' ⍝         ⍝
  NPatchInfo,←⊂ Rectangle     ⍝ source  ⍝ Texture source rectangle
  NPatchInfo,←⊂ i             ⍝ left    ⍝ Left border offset
  NPatchInfo,←⊂ i             ⍝ top     ⍝ Top border offset
  NPatchInfo,←⊂ i             ⍝ right   ⍝ Right border offset
  NPatchInfo,←⊂ i             ⍝ bottom  ⍝ Bottom border offset
  NPatchInfo,←⊂ i             ⍝ layout  ⍝ Layout of the n-patch: 3x3, 1x3 or 3x1

GlyphInfo ← ⍬ ⍝ GlyphInfo, font characters glyphs info
  GlyphInfo,←⊂ '⋄GlyphInfo' ⍝           ⍝
  GlyphInfo,←⊂ i            ⍝ value     ⍝ Character value (Unicode)
  GlyphInfo,←⊂ i            ⍝ offsetX   ⍝ Character offset X when drawing
  GlyphInfo,←⊂ i            ⍝ offsetY   ⍝ Character offset Y when drawing
  GlyphInfo,←⊂ i            ⍝ advanceX  ⍝ Character advance position X
  GlyphInfo,←⊂ Image        ⍝ image     ⍝ Character image data

Font ← ⍬ ⍝ Font, font texture and GlyphInfo array data
  Font,←⊂ '⋄Font'       ⍝               ⍝
  Font,←⊂ i             ⍝ baseSize      ⍝ Base size (default chars height)
  Font,←⊂ i             ⍝ glyphCount    ⍝ Number of glyph characters
  Font,←⊂ i             ⍝ glyphPadding  ⍝ Padding around the glyph characters
  Font,←⊂ Texture2D     ⍝ texture       ⍝ Texture atlas containing the glyphs
  Font,←⊂ '=',Rectangle ⍝ recs          ⍝ Rectangles in texture for the glyphs
  Font,←⊂ '=',GlyphInfo ⍝ glyphs        ⍝ Glyphs info data

Camera3D ← ⍬ ⍝ Camera, defines position/orientation in 3d space
  Camera3D,←⊂ '⋄Camera3D' ⍝             ⍝
  Camera3D,←⊂ v3          ⍝ position    ⍝ Camera position
  Camera3D,←⊂ v3          ⍝ target      ⍝ Camera target it looks-at
  Camera3D,←⊂ v3          ⍝ up          ⍝ Camera up vector (rotation over its axis)
  Camera3D,←⊂ f           ⍝ fovy        ⍝ Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic
  Camera3D,←⊂ i           ⍝ projection  ⍝ Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC
Camera ← Camera3D ⍝ Camera type fallback, defaults to Camera3D

Camera2D ← ⍬ ⍝ Camera2D, defines position/orientation in 2d space
  Camera2D,←⊂ '⋄Camera2D' ⍝           ⍝
  Camera2D,←⊂ v2          ⍝ offset    ⍝ Camera offset (displacement from target)
  Camera2D,←⊂ v2          ⍝ target    ⍝ Camera target (rotation and zoom origin)
  Camera2D,←⊂ f           ⍝ rotation  ⍝ Camera rotation in degrees
  Camera2D,←⊂ f           ⍝ zoom      ⍝ Camera zoom (scaling), should be 1.0f by default

Mesh ← ⍬ ⍝ Mesh, vertex data and vao/vbo
  Mesh,←⊂ '⋄Mesh'    ⍝                ⍝
  Mesh,←⊂ i          ⍝ vertexCount    ⍝ Number of vertices stored in arrays
  Mesh,←⊂ i          ⍝ triangleCount  ⍝ Number of triangles stored (indexed or not)
  Mesh,←⊂ '=',f      ⍝ vertices       ⍝ Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  Mesh,←⊂ '=',f      ⍝ texcoords      ⍝ Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  Mesh,←⊂ '=',f      ⍝ texcoords2     ⍝ Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)
  Mesh,←⊂ '=',f      ⍝ normals        ⍝ Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)
  Mesh,←⊂ '=',f      ⍝ tangents       ⍝ Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)
  Mesh,←⊂ ustr       ⍝ colors         ⍝ Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  Mesh,←⊂ '=',u2     ⍝ indices        ⍝ Vertex indices (in case vertex data comes indexed)
  Mesh,←⊂ '=',f      ⍝ animVertices   ⍝ Animated vertex positions (after bones transformations)
  Mesh,←⊂ '=',f      ⍝ animNormals    ⍝ Animated normals (after bones transformations)
  Mesh,←⊂ ustr       ⍝ boneIds        ⍝ Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning) (shader-location = 6)
  Mesh,←⊂ '=',f      ⍝ boneWeights    ⍝ Vertex bone weight, up to 4 bones influence by vertex (skinning) (shader-location = 7)
  Mesh,←⊂ '=',Matrix ⍝ boneMatrices   ⍝ Bones animated transformation matrices
  Mesh,←⊂ i          ⍝ boneCount      ⍝ Number of bones
  Mesh,←⊂ u          ⍝ vaoId          ⍝ OpenGL Vertex Array Object id
  Mesh,←⊂ '=',u      ⍝ vboId          ⍝ OpenGL Vertex Buffer Objects id (default vertex data)

Shader ← ⍬ ⍝ Shader
  Shader,←⊂ '⋄Shader' ⍝       ⍝
  Shader,←⊂ u         ⍝ id    ⍝ Shader program id
  Shader,←⊂ '=',i     ⍝ locs  ⍝ Shader locations array (RL_MAX_SHADER_LOCATIONS)

MaterialMap ← ⍬ ⍝ MaterialMap
  MaterialMap,←⊂ '⋄MaterialMap' ⍝          ⍝
  MaterialMap,←⊂ Texture2D      ⍝ texture  ⍝ Material map texture
  MaterialMap,←⊂ Color          ⍝ color    ⍝ Material map color
  MaterialMap,←⊂ f              ⍝ value    ⍝ Material map value

Material ← ⍬ ⍝ Material, includes shader and maps
  Material,←⊂ '⋄Material'     ⍝         ⍝
  Material,←⊂ Shader          ⍝ shader  ⍝ Material shader
  Material,←⊂ '=',MaterialMap ⍝ maps    ⍝ Material maps array (MAX_MATERIAL_MAPS)
  Material,←⊂ f,'[4]'         ⍝ params  ⍝ Material generic parameters (if required)

Transform ← ⍬ ⍝ Transform, vertex transformation data
  Transform,←⊂ '⋄Transform' ⍝              ⍝
  Transform,←⊂ v3           ⍝ translation  ⍝ Translation
  Transform,←⊂ Quaternion   ⍝ rotation     ⍝ Rotation
  Transform,←⊂ v3           ⍝ scale        ⍝ Scale

BoneInfo ← ⍬ ⍝ Bone, skeletal animation bone
  BoneInfo,←⊂ '⋄BoneInfo' ⍝         ⍝
  BoneInfo,←⊂ u1,'[32]'   ⍝ name    ⍝ Bone name
  BoneInfo,←⊂ i           ⍝ parent  ⍝ Bone parent

Model ← ⍬ ⍝ Model, meshes, materials and animation data
  Model,←⊂ '⋄Model'      ⍝                ⍝
  Model,←⊂ Matrix        ⍝ transform      ⍝ Local transform matrix
  Model,←⊂ i             ⍝ meshCount      ⍝ Number of meshes
  Model,←⊂ i             ⍝ materialCount  ⍝ Number of materials
  Model,←⊂ '=',Mesh      ⍝ meshes         ⍝ Meshes array
  Model,←⊂ '=',Material  ⍝ materials      ⍝ Materials array
  Model,←⊂ '=',i         ⍝ meshMaterial   ⍝ Mesh material number
  Model,←⊂ i             ⍝ boneCount      ⍝ Number of bones
  Model,←⊂ '=',BoneInfo  ⍝ bones          ⍝ Bones information (skeleton)
  Model,←⊂ '=',Transform ⍝ bindPose       ⍝ Bones base transformation (pose)

ModelAnimation ← ⍬ ⍝ ModelAnimation
  ModelAnimation,←⊂ '⋄ModelAnimation' ⍝             ⍝
  ModelAnimation,←⊂ i                 ⍝ boneCount   ⍝ Number of bones
  ModelAnimation,←⊂ i                 ⍝ frameCount  ⍝ Number of animation frames
  ModelAnimation,←⊂ '=',BoneInfo      ⍝ bones       ⍝ Bones information (skeleton)
  ModelAnimation,←⊂ '==',Transform    ⍝ framePoses  ⍝ Poses array by frame
  ModelAnimation,←⊂ u1,'[32]'         ⍝ name        ⍝ Animation name

Ray ← ⍬ ⍝ Ray, ray for raycasting
  Ray,←⊂ '⋄Ray' ⍝            ⍝
  Ray,←⊂ v3     ⍝ position   ⍝ Ray position (origin)
  Ray,←⊂ v3     ⍝ direction  ⍝ Ray direction (normalized)

RayCollision ← ⍬ ⍝ RayCollision, ray hit information
  RayCollision,←⊂ '⋄RayCollision' ⍝           ⍝
  RayCollision,←⊂ bool            ⍝ hit       ⍝ Did the ray hit something?
  RayCollision,←⊂ f               ⍝ distance  ⍝ Distance to the nearest hit
  RayCollision,←⊂ v3              ⍝ point     ⍝ Point of the nearest hit
  RayCollision,←⊂ v3              ⍝ normal    ⍝ Surface normal of hit

BoundingBox ← ⍬ ⍝ BoundingBox
  BoundingBox,←⊂ '⋄BoundingBox' ⍝      ⍝
  BoundingBox,←⊂ v3             ⍝ min  ⍝ Minimum vertex box-corner
  BoundingBox,←⊂ v3             ⍝ max  ⍝ Maximum vertex box-corner

Wave ← ⍬ ⍝ Wave, audio wave data
  Wave,←⊂ '⋄Wave' ⍝             ⍝
  Wave,←⊂ u       ⍝ frameCount  ⍝ Total number of frames (considering channels)
  Wave,←⊂ u       ⍝ sampleRate  ⍝ Frequency (samples per second)
  Wave,←⊂ u       ⍝ sampleSize  ⍝ Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  Wave,←⊂ u       ⍝ channels    ⍝ Number of channels (1-mono, 2-stereo, ...)
  Wave,←⊂ ptr     ⍝ data        ⍝ Buffer data pointer

AudioStream ← ⍬ ⍝ AudioStream, custom audio stream
  AudioStream,←⊂ '⋄AudioStream' ⍝             ⍝
  AudioStream,←⊂ ptr            ⍝ buffer      ⍝ Pointer to internal data used by the audio system
  AudioStream,←⊂ ptr            ⍝ processor   ⍝ Pointer to internal data processor, useful for audio effects
  AudioStream,←⊂ u              ⍝ sampleRate  ⍝ Frequency (samples per second)
  AudioStream,←⊂ u              ⍝ sampleSize  ⍝ Bit depth (bits per sample): 8, 16, 32 (24 not supported)
  AudioStream,←⊂ u              ⍝ channels    ⍝ Number of channels (1-mono, 2-stereo, ...)

Sound ← ⍬ ⍝ Sound
  Sound,←⊂ '⋄Sound'    ⍝             ⍝
  Sound,←⊂ AudioStream ⍝ stream      ⍝ Audio stream
  Sound,←⊂ u           ⍝ frameCount  ⍝ Total number of frames (considering channels)

Music ← ⍬ ⍝ Music, audio stream, anything longer than ~10 seconds should be streamed
  Music,←⊂ '⋄Music'    ⍝             ⍝
  Music,←⊂ AudioStream ⍝ stream      ⍝ Audio stream
  Music,←⊂ u           ⍝ frameCount  ⍝ Total number of frames (considering channels)
  Music,←⊂ bool        ⍝ looping     ⍝ Music looping enable
  Music,←⊂ i           ⍝ ctxType     ⍝ Type of music context (audio filetype)
  Music,←⊂ ptr         ⍝ ctxData     ⍝ Audio context data, depends on type

VrDeviceInfo ← ⍬ ⍝ VrDeviceInfo, Head-Mounted-Display device parameters
  VrDeviceInfo,←⊂ '⋄VrDeviceInfo' ⍝                         ⍝
  VrDeviceInfo,←⊂ i               ⍝ hResolution             ⍝ Horizontal resolution in pixels
  VrDeviceInfo,←⊂ i               ⍝ vResolution             ⍝ Vertical resolution in pixels
  VrDeviceInfo,←⊂ f               ⍝ hScreenSize             ⍝ Horizontal size in meters
  VrDeviceInfo,←⊂ f               ⍝ vScreenSize             ⍝ Vertical size in meters
  VrDeviceInfo,←⊂ f               ⍝ eyeToScreenDistance     ⍝ Distance between eye and display in meters
  VrDeviceInfo,←⊂ f               ⍝ lensSeparationDistance  ⍝ Lens separation distance in meters
  VrDeviceInfo,←⊂ f               ⍝ interpupillaryDistance  ⍝ IPD (distance between pupils) in meters
  VrDeviceInfo,←⊂ f,'[4]'         ⍝ lensDistortionValues    ⍝ Lens distortion constant parameters
  VrDeviceInfo,←⊂ f,'[4]'         ⍝ chromaAbCorrection      ⍝ Chromatic aberration correction parameters

VrStereoConfig ← ⍬ ⍝ VrStereoConfig, VR stereo rendering configuration for simulator
  VrStereoConfig,←⊂ '⋄VrStereoConfig' ⍝                    ⍝
  VrStereoConfig,←⊂ Matrix,'[2]'      ⍝ projection         ⍝ VR projection matrices (per eye)
  VrStereoConfig,←⊂ Matrix,'[2]'      ⍝ viewOffset         ⍝ VR view offset matrices (per eye)
  VrStereoConfig,←⊂ f,'[2]'           ⍝ leftLensCenter     ⍝ VR left lens center
  VrStereoConfig,←⊂ f,'[2]'           ⍝ rightLensCenter    ⍝ VR right lens center
  VrStereoConfig,←⊂ f,'[2]'           ⍝ leftScreenCenter   ⍝ VR left screen center
  VrStereoConfig,←⊂ f,'[2]'           ⍝ rightScreenCenter  ⍝ VR right screen center
  VrStereoConfig,←⊂ f,'[2]'           ⍝ scale              ⍝ VR distortion scale
  VrStereoConfig,←⊂ f,'[2]'           ⍝ scaleIn            ⍝ VR distortion scale in

FilePathList ← ⍬ ⍝ File path list
  FilePathList,←⊂ '⋄FilePathList' ⍝           ⍝
  FilePathList,←⊂ u               ⍝ capacity  ⍝ Filepaths max entries
  FilePathList,←⊂ u               ⍝ count     ⍝ Filepaths entries count
  FilePathList,←⊂ '=',str         ⍝ paths     ⍝ Filepaths entries

AutomationEvent ← ⍬ ⍝ Automation event
  AutomationEvent,←⊂ '⋄AutomationEvent' ⍝         ⍝
  AutomationEvent,←⊂ u                  ⍝ frame   ⍝ Event frame
  AutomationEvent,←⊂ u                  ⍝ type    ⍝ Event type (AutomationEventType)
  AutomationEvent,←⊂ i,'[4]'            ⍝ params  ⍝ Event parameters (if required)

AutomationEventList ← ⍬ ⍝ Automation event list
  AutomationEventList,←⊂ '⋄AutomationEventList' ⍝           ⍝
  AutomationEventList,←⊂ u                      ⍝ capacity  ⍝ Events max entries (MAX_AUTOMATION_EVENTS)
  AutomationEventList,←⊂ u                      ⍝ count     ⍝ Events entries count
  AutomationEventList,←⊂ '=',AutomationEvent    ⍝ events    ⍝ Events entries
⍝ Mode is either 3:All changes, 2:only manual changes 1:only automatic changes, or 0: no changes
∇{mode} Init pathToRaylibDotAPLN ;import

pathToRaylibDotAPLN ← (⊢,'/'/⍨'/'≢⊃⍤⌽)(⊢,'.'/⍨0=≢⍤⊢),pathToRaylibDotAPLN

import ← 0 ⎕FIX pathToRaylibDotAPLN,'../non-link/setup.apln.hide'
'' ⎕NS 'import.'∘,¨import.⎕NL-2 3 9
⎕EX 'import'

pathToBinary ← lib
:If 0=⎕NC 'mode'
  mode ← 3 ⍝ Default is All changes
:EndIf


InitWindowRAYLIB                       ←                     R('InitWindowRetPtr'                       (i i str                                             )) ⍝ width height title                                                ⍝ Initialize window and OpenGL context
CloseWindowRAYLIB                      ←                     R('CloseWindowRetPtr'                      (⍬                                                   )) ⍝                                                                   ⍝ Close window and unload OpenGL context
WindowShouldCloseRAYLIB                ←                     R('WindowShouldCloseRetPtr'                (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if application should close (KEY_ESCAPE pressed or windows close icon clicked)
IsWindowReadyRAYLIB                    ←                     R('IsWindowReadyRetPtr'                    (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window has been initialized successfully
IsWindowFullscreenRAYLIB               ←                     R('IsWindowFullscreenRetPtr'               (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window is currently fullscreen
IsWindowHiddenRAYLIB                   ←                     R('IsWindowHiddenRetPtr'                   (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window is currently hidden
IsWindowMinimizedRAYLIB                ←                     R('IsWindowMinimizedRetPtr'                (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window is currently minimized
IsWindowMaximizedRAYLIB                ←                     R('IsWindowMaximizedRetPtr'                (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window is currently maximized
IsWindowFocusedRAYLIB                  ←                     R('IsWindowFocusedRetPtr'                  (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window is currently focused
IsWindowResizedRAYLIB                  ←                     R('IsWindowResizedRetPtr'                  (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if window has been resized last frame
IsWindowStateRAYLIB                    ←                     R('IsWindowStateRetPtr'                    (('>',bool) u                                        )) ⍝ flag                                                              ⍝ Check if one specific window flag is enabled
SetWindowStateRAYLIB                   ←                     R('SetWindowStateRetPtr'                   (,⊂ u                                                )) ⍝ flags                                                             ⍝ Set window configuration state using flags
ClearWindowStateRAYLIB                 ←                     R('ClearWindowStateRetPtr'                 (,⊂ u                                                )) ⍝ flags                                                             ⍝ Clear window configuration state flags
ToggleFullscreenRAYLIB                 ←                     R('ToggleFullscreenRetPtr'                 (⍬                                                   )) ⍝                                                                   ⍝ Toggle window state: fullscreen/windowed, resizes monitor to match window resolution
ToggleBorderlessWindowedRAYLIB         ←                     R('ToggleBorderlessWindowedRetPtr'         (⍬                                                   )) ⍝                                                                   ⍝ Toggle window state: borderless windowed, resizes window to match monitor resolution
MaximizeWindowRAYLIB                   ←                     R('MaximizeWindowRetPtr'                   (⍬                                                   )) ⍝                                                                   ⍝ Set window state: maximized, if resizable
MinimizeWindowRAYLIB                   ←                     R('MinimizeWindowRetPtr'                   (⍬                                                   )) ⍝                                                                   ⍝ Set window state: minimized, if resizable
RestoreWindowRAYLIB                    ←                     R('RestoreWindowRetPtr'                    (⍬                                                   )) ⍝                                                                   ⍝ Set window state: not minimized/maximized
SetWindowIconRAYLIB                    ←                     R('SetWindowIconRetPtr'                    (,⊂ Image                                            )) ⍝ image                                                             ⍝ Set icon for window (single image, RGBA 32bit)
SetWindowIconsRAYLIB                   ←                     R('SetWindowIconsRetPtr'                   (('=',Image) i                                       )) ⍝ images count                                                      ⍝ Set icon for window (multiple images, RGBA 32bit)
SetWindowTitleRAYLIB                   ←                     R('SetWindowTitleRetPtr'                   (,⊂ str                                              )) ⍝ title                                                             ⍝ Set title for window
SetWindowPositionRAYLIB                ←                     R('SetWindowPositionRetPtr'                (i i                                                 )) ⍝ x y                                                               ⍝ Set window position on screen
SetWindowMonitorRAYLIB                 ←                     R('SetWindowMonitorRetPtr'                 (,⊂ i                                                )) ⍝ monitor                                                           ⍝ Set monitor for the current window
SetWindowMinSizeRAYLIB                 ←                     R('SetWindowMinSizeRetPtr'                 (i i                                                 )) ⍝ width height                                                      ⍝ Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
SetWindowMaxSizeRAYLIB                 ←                     R('SetWindowMaxSizeRetPtr'                 (i i                                                 )) ⍝ width height                                                      ⍝ Set window maximum dimensions (for FLAG_WINDOW_RESIZABLE)
SetWindowSizeRAYLIB                    ←                     R('SetWindowSizeRetPtr'                    (i i                                                 )) ⍝ width height                                                      ⍝ Set window dimensions
SetWindowOpacityRAYLIB                 ←                     R('SetWindowOpacityRetPtr'                 (,⊂ f                                                )) ⍝ opacity                                                           ⍝ Set window opacity [0.0f..1.0f]
SetWindowFocusedRAYLIB                 ←                     R('SetWindowFocusedRetPtr'                 (⍬                                                   )) ⍝                                                                   ⍝ Set window focused
GetWindowHandleRAYLIB                  ←                     R('GetWindowHandleRetPtr'                  (,⊂ ('>',ptr)                                        )) ⍝                                                                   ⍝ Get native window handle
GetScreenWidthRAYLIB                   ←                     R('GetScreenWidthRetPtr'                   (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get current screen width
GetScreenHeightRAYLIB                  ←                     R('GetScreenHeightRetPtr'                  (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get current screen height
GetRenderWidthRAYLIB                   ←                     R('GetRenderWidthRetPtr'                   (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get current render width (it considers HiDPI)
GetRenderHeightRAYLIB                  ←                     R('GetRenderHeightRetPtr'                  (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get current render height (it considers HiDPI)
GetMonitorCountRAYLIB                  ←                     R('GetMonitorCountRetPtr'                  (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get number of connected monitors
GetCurrentMonitorRAYLIB                ←                     R('GetCurrentMonitorRetPtr'                (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get current monitor where window is placed
GetMonitorPositionRAYLIB               ←                     R('GetMonitorPositionRetPtr'               (('>',v2) i                                          )) ⍝ monitor                                                           ⍝ Get specified monitor position
GetMonitorWidthRAYLIB                  ←                     R('GetMonitorWidthRetPtr'                  (('>',i) i                                           )) ⍝ monitor                                                           ⍝ Get specified monitor width (current video mode used by monitor)
GetMonitorHeightRAYLIB                 ←                     R('GetMonitorHeightRetPtr'                 (('>',i) i                                           )) ⍝ monitor                                                           ⍝ Get specified monitor height (current video mode used by monitor)
GetMonitorPhysicalWidthRAYLIB          ←                     R('GetMonitorPhysicalWidthRetPtr'          (('>',i) i                                           )) ⍝ monitor                                                           ⍝ Get specified monitor physical width in millimetres
GetMonitorPhysicalHeightRAYLIB         ←                     R('GetMonitorPhysicalHeightRetPtr'         (('>',i) i                                           )) ⍝ monitor                                                           ⍝ Get specified monitor physical height in millimetres
GetMonitorRefreshRateRAYLIB            ←                     R('GetMonitorRefreshRateRetPtr'            (('>',i) i                                           )) ⍝ monitor                                                           ⍝ Get specified monitor refresh rate
GetWindowPositionRAYLIB                ←                     R('GetWindowPositionRetPtr'                (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get window position XY on monitor
GetWindowScaleDPIRAYLIB                ←                     R('GetWindowScaleDPIRetPtr'                (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get window scale DPI factor
GetMonitorNameRAYLIB                   ←                     R('GetMonitorNameRetPtr'                   (('>',str) i                                         )) ⍝ monitor                                                           ⍝ Get the human-readable, UTF-8 encoded name of the specified monitor
SetClipboardTextRAYLIB                 ←                     R('SetClipboardTextRetPtr'                 (,⊂ str                                              )) ⍝ text                                                              ⍝ Set clipboard text content
GetClipboardTextRAYLIB                 ←                     R('GetClipboardTextRetPtr'                 (,⊂ ('>',str)                                        )) ⍝                                                                   ⍝ Get clipboard text content
GetClipboardImageRAYLIB                ←                     R('GetClipboardImageRetPtr'                (,⊂ ('>',Image)                                      )) ⍝                                                                   ⍝ Get clipboard image content
EnableEventWaitingRAYLIB               ←                     R('EnableEventWaitingRetPtr'               (⍬                                                   )) ⍝                                                                   ⍝ Enable waiting for events on EndDrawing(), no automatic event polling
DisableEventWaitingRAYLIB              ←                     R('DisableEventWaitingRetPtr'              (⍬                                                   )) ⍝                                                                   ⍝ Disable waiting for events on EndDrawing(), automatic events polling
ShowCursorRAYLIB                       ←                     R('ShowCursorRetPtr'                       (⍬                                                   )) ⍝                                                                   ⍝ Shows cursor
HideCursorRAYLIB                       ←                     R('HideCursorRetPtr'                       (⍬                                                   )) ⍝                                                                   ⍝ Hides cursor
IsCursorHiddenRAYLIB                   ←                     R('IsCursorHiddenRetPtr'                   (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if cursor is not visible
EnableCursorRAYLIB                     ←                     R('EnableCursorRetPtr'                     (⍬                                                   )) ⍝                                                                   ⍝ Enables cursor (unlock cursor)
DisableCursorRAYLIB                    ←                     R('DisableCursorRetPtr'                    (⍬                                                   )) ⍝                                                                   ⍝ Disables cursor (lock cursor)
IsCursorOnScreenRAYLIB                 ←                     R('IsCursorOnScreenRetPtr'                 (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if cursor is on the screen
ClearBackgroundRAYLIB                  ←                     R('ClearBackgroundRetPtr'                  (,⊂ Color                                            )) ⍝ color                                                             ⍝ Set background color (framebuffer clear color)
BeginDrawingRAYLIB                     ←                     R('BeginDrawingRetPtr'                     (⍬                                                   )) ⍝                                                                   ⍝ Setup canvas (framebuffer) to start drawing
EndDrawingRAYLIB                       ←                     R('EndDrawingRetPtr'                       (⍬                                                   )) ⍝                                                                   ⍝ End canvas drawing and swap buffers (double buffering)
BeginMode2DRAYLIB                      ←                     R('BeginMode2DRetPtr'                      (,⊂ Camera2D                                         )) ⍝ camera                                                            ⍝ Begin 2D mode with custom camera (2D)
EndMode2DRAYLIB                        ←                     R('EndMode2DRetPtr'                        (⍬                                                   )) ⍝                                                                   ⍝ Ends 2D mode with custom camera
BeginMode3DRAYLIB                      ←                     R('BeginMode3DRetPtr'                      (,⊂ Camera3D                                         )) ⍝ camera                                                            ⍝ Begin 3D mode with custom camera (3D)
EndMode3DRAYLIB                        ←                     R('EndMode3DRetPtr'                        (⍬                                                   )) ⍝                                                                   ⍝ Ends 3D mode and returns to default 2D orthographic mode
BeginTextureModeRAYLIB                 ←                     R('BeginTextureModeRetPtr'                 (,⊂ RenderTexture2D                                  )) ⍝ target                                                            ⍝ Begin drawing to render texture
EndTextureModeRAYLIB                   ←                     R('EndTextureModeRetPtr'                   (⍬                                                   )) ⍝                                                                   ⍝ Ends drawing to render texture
BeginShaderModeRAYLIB                  ←                     R('BeginShaderModeRetPtr'                  (,⊂ Shader                                           )) ⍝ shader                                                            ⍝ Begin custom shader drawing
EndShaderModeRAYLIB                    ←                     R('EndShaderModeRetPtr'                    (⍬                                                   )) ⍝                                                                   ⍝ End custom shader drawing (use default shader)
BeginBlendModeRAYLIB                   ←                     R('BeginBlendModeRetPtr'                   (,⊂ i                                                )) ⍝ mode                                                              ⍝ Begin blending mode (alpha, additive, multiplied, subtract, custom)
EndBlendModeRAYLIB                     ←                     R('EndBlendModeRetPtr'                     (⍬                                                   )) ⍝                                                                   ⍝ End blending mode (reset to default: alpha blending)
BeginScissorModeRAYLIB                 ←                     R('BeginScissorModeRetPtr'                 (i i i i                                             )) ⍝ x y width height                                                  ⍝ Begin scissor mode (define screen area for following drawing)
EndScissorModeRAYLIB                   ←                     R('EndScissorModeRetPtr'                   (⍬                                                   )) ⍝                                                                   ⍝ End scissor mode
BeginVrStereoModeRAYLIB                ←                     R('BeginVrStereoModeRetPtr'                (,⊂ VrStereoConfig                                   )) ⍝ config                                                            ⍝ Begin stereo rendering (requires VR simulator)
EndVrStereoModeRAYLIB                  ←                     R('EndVrStereoModeRetPtr'                  (⍬                                                   )) ⍝                                                                   ⍝ End stereo rendering (requires VR simulator)
LoadVrStereoConfigRAYLIB               ←                     R('LoadVrStereoConfigRetPtr'               (('>',VrStereoConfig) VrDeviceInfo                   )) ⍝ device                                                            ⍝ Load VR stereo config for VR simulator device parameters
UnloadVrStereoConfigRAYLIB             ←                     R('UnloadVrStereoConfigRetPtr'             (,⊂ VrStereoConfig                                   )) ⍝ config                                                            ⍝ Unload VR stereo config
LoadShaderRAYLIB                       ←                     R('LoadShaderRetPtr'                       (('>',Shader) str str                                )) ⍝ vsFileName fsFileName                                             ⍝ Load shader from files and bind default locations
LoadShaderFromMemoryRAYLIB             ←                     R('LoadShaderFromMemoryRetPtr'             (('>',Shader) str str                                )) ⍝ vsCode fsCode                                                     ⍝ Load shader from code strings and bind default locations
IsShaderValidRAYLIB                    ←                     R('IsShaderValidRetPtr'                    (('>',bool) Shader                                   )) ⍝ shader                                                            ⍝ Check if a shader is valid (loaded on GPU)
GetShaderLocationRAYLIB                ←                     R('GetShaderLocationRetPtr'                (('>',i) Shader str                                  )) ⍝ shader uniformName                                                ⍝ Get shader uniform location
GetShaderLocationAttribRAYLIB          ←                     R('GetShaderLocationAttribRetPtr'          (('>',i) Shader str                                  )) ⍝ shader attribName                                                 ⍝ Get shader attribute location
SetShaderValueRAYLIB                   ←                     R('SetShaderValueRetPtr'                   (Shader i ptr i                                      )) ⍝ shader locIndex value uniformType                                 ⍝ Set shader uniform value
SetShaderValueVRAYLIB                  ←                     R('SetShaderValueVRetPtr'                  (Shader i ptr i i                                    )) ⍝ shader locIndex value uniformType count                           ⍝ Set shader uniform value vector
SetShaderValueMatrixRAYLIB             ←                     R('SetShaderValueMatrixRetPtr'             (Shader i Matrix                                     )) ⍝ shader locIndex mat                                               ⍝ Set shader uniform value (matrix 4x4)
SetShaderValueTextureRAYLIB            ←                     R('SetShaderValueTextureRetPtr'            (Shader i Texture2D                                  )) ⍝ shader locIndex texture                                           ⍝ Set shader uniform value for texture (sampler2d)
UnloadShaderRAYLIB                     ←                     R('UnloadShaderRetPtr'                     (,⊂ Shader                                           )) ⍝ shader                                                            ⍝ Unload shader from GPU memory (VRAM)
GetScreenToWorldRayRAYLIB              ←                     R('GetScreenToWorldRayRetPtr'              (('>',Ray) v2 Camera                                 )) ⍝ position camera                                                   ⍝ Get a ray trace from screen position (i.e mouse)
GetScreenToWorldRayExRAYLIB            ←                     R('GetScreenToWorldRayExRetPtr'            (('>',Ray) v2 Camera i i                             )) ⍝ position camera width height                                      ⍝ Get a ray trace from screen position (i.e mouse) in a viewport
GetWorldToScreenRAYLIB                 ←                     R('GetWorldToScreenRetPtr'                 (('>',v2) v3 Camera                                  )) ⍝ position camera                                                   ⍝ Get the screen space position for a 3d world space position
GetWorldToScreenExRAYLIB               ←                     R('GetWorldToScreenExRetPtr'               (('>',v2) v3 Camera i i                              )) ⍝ position camera width height                                      ⍝ Get size position for a 3d world space position
GetWorldToScreen2DRAYLIB               ←                     R('GetWorldToScreen2DRetPtr'               (('>',v2) v2 Camera2D                                )) ⍝ position camera                                                   ⍝ Get the screen space position for a 2d camera world space position
GetScreenToWorld2DRAYLIB               ←                     R('GetScreenToWorld2DRetPtr'               (('>',v2) v2 Camera2D                                )) ⍝ position camera                                                   ⍝ Get the world space position for a 2d camera screen space position
GetCameraMatrixRAYLIB                  ←                     R('GetCameraMatrixRetPtr'                  (('>',Matrix) Camera                                 )) ⍝ camera                                                            ⍝ Get camera transform matrix (view matrix)
GetCameraMatrix2DRAYLIB                ←                     R('GetCameraMatrix2DRetPtr'                (('>',Matrix) Camera2D                               )) ⍝ camera                                                            ⍝ Get camera 2d transform matrix
SetTargetFPSRAYLIB                     ←                     R('SetTargetFPSRetPtr'                     (,⊂ i                                                )) ⍝ fps                                                               ⍝ Set target FPS (maximum)
GetFrameTimeRAYLIB                     ←                     R('GetFrameTimeRetPtr'                     (,⊂ ('>',f)                                          )) ⍝                                                                   ⍝ Get time in seconds for last frame drawn (delta time)
GetTimeRAYLIB                          ←                     R('GetTimeRetPtr'                          (,⊂ ('>',f8)                                         )) ⍝                                                                   ⍝ Get elapsed time in seconds since InitWindow()
GetFPSRAYLIB                           ←                     R('GetFPSRetPtr'                           (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get current FPS
SwapScreenBufferRAYLIB                 ←                     R('SwapScreenBufferRetPtr'                 (⍬                                                   )) ⍝                                                                   ⍝ Swap back buffer with front buffer (screen drawing)
PollInputEventsRAYLIB                  ←                     R('PollInputEventsRetPtr'                  (⍬                                                   )) ⍝                                                                   ⍝ Register all input events
WaitTimeRAYLIB                         ←                     R('WaitTimeRetPtr'                         (,⊂ f8                                               )) ⍝ seconds                                                           ⍝ Wait for some time (halt program execution)
SetRandomSeedRAYLIB                    ←                     R('SetRandomSeedRetPtr'                    (,⊂ u                                                )) ⍝ seed                                                              ⍝ Set the seed for the random number generator
GetRandomValueRAYLIB                   ←                     R('GetRandomValueRetPtr'                   (('>',i) i i                                         )) ⍝ min max                                                           ⍝ Get a random value between min and max (both included)
LoadRandomSequenceRAYLIB               ←                     R('LoadRandomSequenceRetPtr'               (ptr u i i                                           )) ⍝ count min max                                                     ⍝ Load random values sequence, no values repeated
UnloadRandomSequenceRAYLIB             ←                     R('UnloadRandomSequenceRetPtr'             (,⊂ ('=',i)                                          )) ⍝ sequence                                                          ⍝ Unload random values sequence
TakeScreenshotRAYLIB                   ←                     R('TakeScreenshotRetPtr'                   (,⊂ str                                              )) ⍝ fileName                                                          ⍝ Takes a screenshot of current screen (filename extension defines format)
SetConfigFlagsRAYLIB                   ←                     R('SetConfigFlagsRetPtr'                   (,⊂ u                                                )) ⍝ flags                                                             ⍝ Setup init configuration flags (view FLAGS)
OpenURLRAYLIB                          ←                     R('OpenURLRetPtr'                          (,⊂ str                                              )) ⍝ url                                                               ⍝ Open URL with default system browser (if available)
TraceLogRAYLIB                         ←                     R('TraceLogRetPtr'                         (i str ptr                                           )) ⍝ logLevel text args                                                ⍝ Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR...)
SetTraceLogLevelRAYLIB                 ←                     R('SetTraceLogLevelRetPtr'                 (,⊂ i                                                )) ⍝ logLevel                                                          ⍝ Set the current threshold (minimum) log level
MemAllocRAYLIB                         ←                     R('MemAllocRetPtr'                         (('>',ptr) u                                         )) ⍝ size                                                              ⍝ Internal memory allocator
MemReallocRAYLIB                       ←                     R('MemReallocRetPtr'                       (('>',ptr) ptr u                                     )) ⍝ ptr size                                                          ⍝ Internal memory reallocator
MemFreeRAYLIB                          ←                     R('MemFreeRetPtr'                          (,⊂ ptr                                              )) ⍝ ptr                                                               ⍝ Internal memory free
SetTraceLogCallbackRAYLIB              ←                     R('SetTraceLogCallbackRetPtr'              (,⊂ ptr                                              )) ⍝ callback                                                          ⍝ Set custom trace log
SetLoadFileDataCallbackRAYLIB          ←                     R('SetLoadFileDataCallbackRetPtr'          (,⊂ ptr                                              )) ⍝ callback                                                          ⍝ Set custom file binary data loader
SetSaveFileDataCallbackRAYLIB          ←                     R('SetSaveFileDataCallbackRetPtr'          (,⊂ ptr                                              )) ⍝ callback                                                          ⍝ Set custom file binary data saver
SetLoadFileTextCallbackRAYLIB          ←                     R('SetLoadFileTextCallbackRetPtr'          (,⊂ ptr                                              )) ⍝ callback                                                          ⍝ Set custom file text data loader
SetSaveFileTextCallbackRAYLIB          ←                     R('SetSaveFileTextCallbackRetPtr'          (,⊂ ptr                                              )) ⍝ callback                                                          ⍝ Set custom file text data saver
LoadFileDataRAYLIB                     ←                     R('LoadFileDataRetPtr'                     (('>',ustr) str ('=',i)                              )) ⍝ fileName dataSize                                                 ⍝ Load file data as byte array (read)
UnloadFileDataRAYLIB                   ←                     R('UnloadFileDataRetPtr'                   (,⊂ ustr                                             )) ⍝ data                                                              ⍝ Unload file data allocated by LoadFileData()
SaveFileDataRAYLIB                     ←                     R('SaveFileDataRetPtr'                     (('>',bool) str ptr i                                )) ⍝ fileName data dataSize                                            ⍝ Save data to file from byte array (write), returns true on success
ExportDataAsCodeRAYLIB                 ←                     R('ExportDataAsCodeRetPtr'                 (('>',bool) ustr i str                               )) ⍝ data dataSize fileName                                            ⍝ Export data to code (.h), returns true on success
LoadFileTextRAYLIB                     ←                     R('LoadFileTextRetPtr'                     (('>',str) str                                       )) ⍝ fileName                                                          ⍝ Load text data from file (read), returns a '\0' terminated string
UnloadFileTextRAYLIB                   ←                     R('UnloadFileTextRetPtr'                   (,⊂ str                                              )) ⍝ text                                                              ⍝ Unload file text data allocated by LoadFileText()
SaveFileTextRAYLIB                     ←                     R('SaveFileTextRetPtr'                     (('>',bool) str str                                  )) ⍝ fileName text                                                     ⍝ Save text data to file (write), string must be '\0' terminated, returns true on success
FileExistsRAYLIB                       ←                     R('FileExistsRetPtr'                       (('>',bool) str                                      )) ⍝ fileName                                                          ⍝ Check if file exists
DirectoryExistsRAYLIB                  ←                     R('DirectoryExistsRetPtr'                  (('>',bool) str                                      )) ⍝ dirPath                                                           ⍝ Check if a directory path exists
IsFileExtensionRAYLIB                  ←                     R('IsFileExtensionRetPtr'                  (('>',bool) str str                                  )) ⍝ fileName ext                                                      ⍝ Check file extension (including point: .png, .wav)
GetFileLengthRAYLIB                    ←                     R('GetFileLengthRetPtr'                    (('>',i) str                                         )) ⍝ fileName                                                          ⍝ Get file length in bytes (NOTE: GetFileSize() conflicts with windows.h)
GetFileExtensionRAYLIB                 ←                     R('GetFileExtensionRetPtr'                 (('>',str) str                                       )) ⍝ fileName                                                          ⍝ Get pointer to extension for a filename string (includes dot: '.png')
GetFileNameRAYLIB                      ←                     R('GetFileNameRetPtr'                      (('>',str) str                                       )) ⍝ filePath                                                          ⍝ Get pointer to filename for a path string
GetFileNameWithoutExtRAYLIB            ←                     R('GetFileNameWithoutExtRetPtr'            (('>',str) str                                       )) ⍝ filePath                                                          ⍝ Get filename string without extension (uses static string)
GetDirectoryPathRAYLIB                 ←                     R('GetDirectoryPathRetPtr'                 (('>',str) str                                       )) ⍝ filePath                                                          ⍝ Get full path for a given fileName with path (uses static string)
GetPrevDirectoryPathRAYLIB             ←                     R('GetPrevDirectoryPathRetPtr'             (('>',str) str                                       )) ⍝ dirPath                                                           ⍝ Get previous directory path for a given path (uses static string)
GetWorkingDirectoryRAYLIB              ←                     R('GetWorkingDirectoryRetPtr'              (,⊂ ('>',str)                                        )) ⍝                                                                   ⍝ Get current working directory (uses static string)
GetApplicationDirectoryRAYLIB          ←                     R('GetApplicationDirectoryRetPtr'          (,⊂ ('>',str)                                        )) ⍝                                                                   ⍝ Get the directory of the running application (uses static string)
MakeDirectoryRAYLIB                    ←                     R('MakeDirectoryRetPtr'                    (('>',i) str                                         )) ⍝ dirPath                                                           ⍝ Create directories (including full path requested), returns 0 on success
ChangeDirectoryRAYLIB                  ←                     R('ChangeDirectoryRetPtr'                  (('>',bool) str                                      )) ⍝ dir                                                               ⍝ Change working directory, return true on success
IsPathFileRAYLIB                       ←                     R('IsPathFileRetPtr'                       (('>',bool) str                                      )) ⍝ path                                                              ⍝ Check if a given path is a file or a directory
IsFileNameValidRAYLIB                  ←                     R('IsFileNameValidRetPtr'                  (('>',bool) str                                      )) ⍝ fileName                                                          ⍝ Check if fileName is valid for the platform/OS
LoadDirectoryFilesRAYLIB               ←                     R('LoadDirectoryFilesRetPtr'               (('>',FilePathList) str                              )) ⍝ dirPath                                                           ⍝ Load directory filepaths
LoadDirectoryFilesExRAYLIB             ←                     R('LoadDirectoryFilesExRetPtr'             (('>',FilePathList) str str bool                     )) ⍝ basePath filter scanSubdirs                                       ⍝ Load directory filepaths with extension filtering and recursive directory scan. Use 'DIR' in the filter string to include directories in the result
UnloadDirectoryFilesRAYLIB             ←                     R('UnloadDirectoryFilesRetPtr'             (,⊂ FilePathList                                     )) ⍝ files                                                             ⍝ Unload filepaths
IsFileDroppedRAYLIB                    ←                     R('IsFileDroppedRetPtr'                    (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if a file has been dropped into window
LoadDroppedFilesRAYLIB                 ←                     R('LoadDroppedFilesRetPtr'                 (,⊂ ('>',FilePathList)                               )) ⍝                                                                   ⍝ Load dropped filepaths
UnloadDroppedFilesRAYLIB               ←                     R('UnloadDroppedFilesRetPtr'               (,⊂ FilePathList                                     )) ⍝ files                                                             ⍝ Unload dropped filepaths
GetFileModTimeRAYLIB                   ←                     R('GetFileModTimeRetPtr'                   (('>',i8) str                                        )) ⍝ fileName                                                          ⍝ Get file modification time (last write time)
CompressDataRAYLIB                     ←                     R('CompressDataRetPtr'                     (('>',ustr) ustr i ('=',i)                           )) ⍝ data dataSize compDataSize                                        ⍝ Compress data (DEFLATE algorithm), memory must be MemFree()
DecompressDataRAYLIB                   ←                     R('DecompressDataRetPtr'                   (('>',ustr) ustr i ('=',i)                           )) ⍝ compData compDataSize dataSize                                    ⍝ Decompress data (DEFLATE algorithm), memory must be MemFree()
EncodeDataBase64RAYLIB                 ←                     R('EncodeDataBase64RetPtr'                 (('>',str) ustr i ('=',i)                            )) ⍝ data dataSize outputSize                                          ⍝ Encode data to Base64 string, memory must be MemFree()
DecodeDataBase64RAYLIB                 ←                     R('DecodeDataBase64RetPtr'                 (('>',ustr) ustr ('=',i)                             )) ⍝ data outputSize                                                   ⍝ Decode Base64 string data, memory must be MemFree()
ComputeCRC32RAYLIB                     ←                     R('ComputeCRC32RetPtr'                     (('>',u) ustr i                                      )) ⍝ data dataSize                                                     ⍝ Compute CRC32 hash code
ComputeMD5RAYLIB                       ←                     R('ComputeMD5RetPtr'                       (ptr ustr i                                          )) ⍝ data dataSize                                                     ⍝ Compute MD5 hash code, returns static int[4] (16 bytes)
ComputeSHA1RAYLIB                      ←                     R('ComputeSHA1RetPtr'                      (ptr ustr i                                          )) ⍝ data dataSize                                                     ⍝ Compute SHA1 hash code, returns static int[5] (20 bytes)
LoadAutomationEventListRAYLIB          ←                     R('LoadAutomationEventListRetPtr'          (('>',AutomationEventList) str                       )) ⍝ fileName                                                          ⍝ Load automation events list from file, NULL for empty list, capacity = MAX_AUTOMATION_EVENTS
UnloadAutomationEventListRAYLIB        ←                     R('UnloadAutomationEventListRetPtr'        (,⊂ AutomationEventList                              )) ⍝ list                                                              ⍝ Unload automation events list from file
ExportAutomationEventListRAYLIB        ←                     R('ExportAutomationEventListRetPtr'        (('>',bool) AutomationEventList str                  )) ⍝ list fileName                                                     ⍝ Export automation events list as text file
SetAutomationEventListRAYLIB           ←                     R('SetAutomationEventListRetPtr'           (,⊂ ('=',AutomationEventList)                        )) ⍝ list                                                              ⍝ Set automation event list to record to
SetAutomationEventBaseFrameRAYLIB      ←                     R('SetAutomationEventBaseFrameRetPtr'      (,⊂ i                                                )) ⍝ frame                                                             ⍝ Set automation event internal base frame to start recording
StartAutomationEventRecordingRAYLIB    ←                     R('StartAutomationEventRecordingRetPtr'    (⍬                                                   )) ⍝                                                                   ⍝ Start recording automation events (AutomationEventList must be set)
StopAutomationEventRecordingRAYLIB     ←                     R('StopAutomationEventRecordingRetPtr'     (⍬                                                   )) ⍝                                                                   ⍝ Stop recording automation events
PlayAutomationEventRAYLIB              ←                     R('PlayAutomationEventRetPtr'              (,⊂ AutomationEvent                                  )) ⍝ event                                                             ⍝ Play a recorded automation event
IsKeyPressedRAYLIB                     ←                     R('IsKeyPressedRetPtr'                     (('>',bool) i                                        )) ⍝ key                                                               ⍝ Check if a key has been pressed once
IsKeyPressedRepeatRAYLIB               ←                     R('IsKeyPressedRepeatRetPtr'               (('>',bool) i                                        )) ⍝ key                                                               ⍝ Check if a key has been pressed again
IsKeyDownRAYLIB                        ←                     R('IsKeyDownRetPtr'                        (('>',bool) i                                        )) ⍝ key                                                               ⍝ Check if a key is being pressed
IsKeyReleasedRAYLIB                    ←                     R('IsKeyReleasedRetPtr'                    (('>',bool) i                                        )) ⍝ key                                                               ⍝ Check if a key has been released once
IsKeyUpRAYLIB                          ←                     R('IsKeyUpRetPtr'                          (('>',bool) i                                        )) ⍝ key                                                               ⍝ Check if a key is NOT being pressed
GetKeyPressedRAYLIB                    ←                     R('GetKeyPressedRetPtr'                    (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get key pressed (keycode), call it multiple times for keys queued, returns 0 when the queue is empty
GetCharPressedRAYLIB                   ←                     R('GetCharPressedRetPtr'                   (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get char pressed (unicode), call it multiple times for chars queued, returns 0 when the queue is empty
SetExitKeyRAYLIB                       ←                     R('SetExitKeyRetPtr'                       (,⊂ i                                                )) ⍝ key                                                               ⍝ Set a custom key to exit program (default is ESC)
IsGamepadAvailableRAYLIB               ←                     R('IsGamepadAvailableRetPtr'               (('>',bool) i                                        )) ⍝ gamepad                                                           ⍝ Check if a gamepad is available
GetGamepadNameRAYLIB                   ←                     R('GetGamepadNameRetPtr'                   (('>',str) i                                         )) ⍝ gamepad                                                           ⍝ Get gamepad internal name id
IsGamepadButtonPressedRAYLIB           ←                     R('IsGamepadButtonPressedRetPtr'           (('>',bool) i i                                      )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button has been pressed once
IsGamepadButtonDownRAYLIB              ←                     R('IsGamepadButtonDownRetPtr'              (('>',bool) i i                                      )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button is being pressed
IsGamepadButtonReleasedRAYLIB          ←                     R('IsGamepadButtonReleasedRetPtr'          (('>',bool) i i                                      )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button has been released once
IsGamepadButtonUpRAYLIB                ←                     R('IsGamepadButtonUpRetPtr'                (('>',bool) i i                                      )) ⍝ gamepad button                                                    ⍝ Check if a gamepad button is NOT being pressed
GetGamepadButtonPressedRAYLIB          ←                     R('GetGamepadButtonPressedRetPtr'          (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get the last gamepad button pressed
GetGamepadAxisCountRAYLIB              ←                     R('GetGamepadAxisCountRetPtr'              (('>',i) i                                           )) ⍝ gamepad                                                           ⍝ Get gamepad axis count for a gamepad
GetGamepadAxisMovementRAYLIB           ←                     R('GetGamepadAxisMovementRetPtr'           (('>',f) i i                                         )) ⍝ gamepad axis                                                      ⍝ Get axis movement value for a gamepad axis
SetGamepadMappingsRAYLIB               ←                     R('SetGamepadMappingsRetPtr'               (('>',i) str                                         )) ⍝ mappings                                                          ⍝ Set internal gamepad mappings (SDL_GameControllerDB)
SetGamepadVibrationRAYLIB              ←                     R('SetGamepadVibrationRetPtr'              (i f f f                                             )) ⍝ gamepad leftMotor rightMotor duration                             ⍝ Set gamepad vibration for both motors (duration in seconds)
IsMouseButtonPressedRAYLIB             ←                     R('IsMouseButtonPressedRetPtr'             (('>',bool) i                                        )) ⍝ button                                                            ⍝ Check if a mouse button has been pressed once
IsMouseButtonDownRAYLIB                ←                     R('IsMouseButtonDownRetPtr'                (('>',bool) i                                        )) ⍝ button                                                            ⍝ Check if a mouse button is being pressed
IsMouseButtonReleasedRAYLIB            ←                     R('IsMouseButtonReleasedRetPtr'            (('>',bool) i                                        )) ⍝ button                                                            ⍝ Check if a mouse button has been released once
IsMouseButtonUpRAYLIB                  ←                     R('IsMouseButtonUpRetPtr'                  (('>',bool) i                                        )) ⍝ button                                                            ⍝ Check if a mouse button is NOT being pressed
GetMouseXRAYLIB                        ←                     R('GetMouseXRetPtr'                        (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get mouse position X
GetMouseYRAYLIB                        ←                     R('GetMouseYRetPtr'                        (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get mouse position Y
GetMousePositionRAYLIB                 ←                     R('GetMousePositionRetPtr'                 (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get mouse position XY
GetMouseDeltaRAYLIB                    ←                     R('GetMouseDeltaRetPtr'                    (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get mouse delta between frames
SetMousePositionRAYLIB                 ←                     R('SetMousePositionRetPtr'                 (i i                                                 )) ⍝ x y                                                               ⍝ Set mouse position XY
SetMouseOffsetRAYLIB                   ←                     R('SetMouseOffsetRetPtr'                   (i i                                                 )) ⍝ offsetX offsetY                                                   ⍝ Set mouse offset
SetMouseScaleRAYLIB                    ←                     R('SetMouseScaleRetPtr'                    (f f                                                 )) ⍝ scaleX scaleY                                                     ⍝ Set mouse scaling
GetMouseWheelMoveRAYLIB                ←                     R('GetMouseWheelMoveRetPtr'                (,⊂ ('>',f)                                          )) ⍝                                                                   ⍝ Get mouse wheel movement for X or Y, whichever is larger
GetMouseWheelMoveVRAYLIB               ←                     R('GetMouseWheelMoveVRetPtr'               (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get mouse wheel movement for both X and Y
SetMouseCursorRAYLIB                   ←                     R('SetMouseCursorRetPtr'                   (,⊂ i                                                )) ⍝ cursor                                                            ⍝ Set mouse cursor
GetTouchXRAYLIB                        ←                     R('GetTouchXRetPtr'                        (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get touch position X for touch point 0 (relative to screen size)
GetTouchYRAYLIB                        ←                     R('GetTouchYRetPtr'                        (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get touch position Y for touch point 0 (relative to screen size)
GetTouchPositionRAYLIB                 ←                     R('GetTouchPositionRetPtr'                 (('>',v2) i                                          )) ⍝ index                                                             ⍝ Get touch position XY for a touch point index (relative to screen size)
GetTouchPointIdRAYLIB                  ←                     R('GetTouchPointIdRetPtr'                  (('>',i) i                                           )) ⍝ index                                                             ⍝ Get touch point identifier for given index
GetTouchPointCountRAYLIB               ←                     R('GetTouchPointCountRetPtr'               (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get number of touch points
SetGesturesEnabledRAYLIB               ←                     R('SetGesturesEnabledRetPtr'               (,⊂ u                                                )) ⍝ flags                                                             ⍝ Enable a set of gestures using flags
IsGestureDetectedRAYLIB                ←                     R('IsGestureDetectedRetPtr'                (('>',bool) u                                        )) ⍝ gesture                                                           ⍝ Check if a gesture have been detected
GetGestureDetectedRAYLIB               ←                     R('GetGestureDetectedRetPtr'               (,⊂ ('>',i)                                          )) ⍝                                                                   ⍝ Get latest detected gesture
GetGestureHoldDurationRAYLIB           ←                     R('GetGestureHoldDurationRetPtr'           (,⊂ ('>',f)                                          )) ⍝                                                                   ⍝ Get gesture hold time in seconds
GetGestureDragVectorRAYLIB             ←                     R('GetGestureDragVectorRetPtr'             (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get gesture drag vector
GetGestureDragAngleRAYLIB              ←                     R('GetGestureDragAngleRetPtr'              (,⊂ ('>',f)                                          )) ⍝                                                                   ⍝ Get gesture drag angle
GetGesturePinchVectorRAYLIB            ←                     R('GetGesturePinchVectorRetPtr'            (,⊂ ('>',v2)                                         )) ⍝                                                                   ⍝ Get gesture pinch delta
GetGesturePinchAngleRAYLIB             ←                     R('GetGesturePinchAngleRetPtr'             (,⊂ ('>',f)                                          )) ⍝                                                                   ⍝ Get gesture pinch angle
UpdateCameraRAYLIB                     ←                     R('UpdateCameraRetPtr'                     (('=',Camera) i                                      )) ⍝ camera mode                                                       ⍝ Update camera position for selected mode
UpdateCameraProRAYLIB                  ←                     R('UpdateCameraProRetPtr'                  (('=',Camera) v3 v3 f                                )) ⍝ camera movement rotation zoom                                     ⍝ Update camera movement/rotation
SetShapesTextureRAYLIB                 ←                     R('SetShapesTextureRetPtr'                 (Texture2D Rectangle                                 )) ⍝ texture source                                                    ⍝ Set texture and rectangle to be used on shapes drawing
GetShapesTextureRAYLIB                 ←                     R('GetShapesTextureRetPtr'                 (,⊂ ('>',Texture2D)                                  )) ⍝                                                                   ⍝ Get texture that is used for shapes drawing
GetShapesTextureRectangleRAYLIB        ←                     R('GetShapesTextureRectangleRetPtr'        (,⊂ ('>',Rectangle)                                  )) ⍝                                                                   ⍝ Get texture source rectangle that is used for shapes drawing
DrawPixelRAYLIB                        ←                     R('DrawPixelRetPtr'                        (i i Color                                           )) ⍝ posX posY color                                                   ⍝ Draw a pixel using geometry [Can be slow, use with care]
DrawPixelVRAYLIB                       ←                     R('DrawPixelVRetPtr'                       (v2 Color                                            )) ⍝ position color                                                    ⍝ Draw a pixel using geometry (Vector version) [Can be slow, use with care]
DrawLineRAYLIB                         ←                     R('DrawLineRetPtr'                         (i i i i Color                                       )) ⍝ startPosX startPosY endPosX endPosY color                         ⍝ Draw a line
DrawLineVRAYLIB                        ←                     R('DrawLineVRetPtr'                        (v2 v2 Color                                         )) ⍝ startPos endPos color                                             ⍝ Draw a line (using gl lines)
DrawLineExRAYLIB                       ←                     R('DrawLineExRetPtr'                       (v2 v2 f Color                                       )) ⍝ startPos endPos thick color                                       ⍝ Draw a line (using triangles/quads)
DrawLineStripRAYLIB                    ←                     R('DrawLineStripRetPtr'                    (('<',v2) i Color                                    )) ⍝ points pointCount color                                           ⍝ Draw lines sequence (using gl lines)
DrawLineBezierRAYLIB                   ←                     R('DrawLineBezierRetPtr'                   (v2 v2 f Color                                       )) ⍝ startPos endPos thick color                                       ⍝ Draw line segment cubic-bezier in-out interpolation
DrawCircleRAYLIB                       ←                     R('DrawCircleRetPtr'                       (i i f Color                                         )) ⍝ centerX centerY radius color                                      ⍝ Draw a color-filled circle
DrawCircleSectorRAYLIB                 ←                     R('DrawCircleSectorRetPtr'                 (v2 f f f i Color                                    )) ⍝ center radius startAngle endAngle segments color                  ⍝ Draw a piece of a circle
DrawCircleSectorLinesRAYLIB            ←                     R('DrawCircleSectorLinesRetPtr'            (v2 f f f i Color                                    )) ⍝ center radius startAngle endAngle segments color                  ⍝ Draw circle sector outline
DrawCircleGradientRAYLIB               ←                     R('DrawCircleGradientRetPtr'               (i i f Color Color                                   )) ⍝ centerX centerY radius inner outer                                ⍝ Draw a gradient-filled circle
DrawCircleVRAYLIB                      ←                     R('DrawCircleVRetPtr'                      (v2 f Color                                          )) ⍝ center radius color                                               ⍝ Draw a color-filled circle (Vector version)
DrawCircleLinesRAYLIB                  ←                     R('DrawCircleLinesRetPtr'                  (i i f Color                                         )) ⍝ centerX centerY radius color                                      ⍝ Draw circle outline
DrawCircleLinesVRAYLIB                 ←                     R('DrawCircleLinesVRetPtr'                 (v2 f Color                                          )) ⍝ center radius color                                               ⍝ Draw circle outline (Vector version)
DrawEllipseRAYLIB                      ←                     R('DrawEllipseRetPtr'                      (i i f f Color                                       )) ⍝ centerX centerY radiusH radiusV color                             ⍝ Draw ellipse
DrawEllipseLinesRAYLIB                 ←                     R('DrawEllipseLinesRetPtr'                 (i i f f Color                                       )) ⍝ centerX centerY radiusH radiusV color                             ⍝ Draw ellipse outline
DrawRingRAYLIB                         ←                     R('DrawRingRetPtr'                         (v2 f f f f i Color                                  )) ⍝ center innerRadius outerRadius startAngle endAngle segments color ⍝ Draw ring
DrawRingLinesRAYLIB                    ←                     R('DrawRingLinesRetPtr'                    (v2 f f f f i Color                                  )) ⍝ center innerRadius outerRadius startAngle endAngle segments color ⍝ Draw ring outline
DrawRectangleRAYLIB                    ←                     R('DrawRectangleRetPtr'                    (i i i i Color                                       )) ⍝ posX posY width height color                                      ⍝ Draw a color-filled rectangle
DrawRectangleVRAYLIB                   ←                     R('DrawRectangleVRetPtr'                   (v2 v2 Color                                         )) ⍝ position size color                                               ⍝ Draw a color-filled rectangle (Vector version)
DrawRectangleRecRAYLIB                 ←                     R('DrawRectangleRecRetPtr'                 (Rectangle Color                                     )) ⍝ rec color                                                         ⍝ Draw a color-filled rectangle
DrawRectangleProRAYLIB                 ←                     R('DrawRectangleProRetPtr'                 (Rectangle v2 f Color                                )) ⍝ rec origin rotation color                                         ⍝ Draw a color-filled rectangle with pro parameters
DrawRectangleGradientVRAYLIB           ←                     R('DrawRectangleGradientVRetPtr'           (i i i i Color Color                                 )) ⍝ posX posY width height top bottom                                 ⍝ Draw a vertical-gradient-filled rectangle
DrawRectangleGradientHRAYLIB           ←                     R('DrawRectangleGradientHRetPtr'           (i i i i Color Color                                 )) ⍝ posX posY width height left right                                 ⍝ Draw a horizontal-gradient-filled rectangle
DrawRectangleGradientExRAYLIB          ←                     R('DrawRectangleGradientExRetPtr'          (Rectangle Color Color Color Color                   )) ⍝ rec topLeft bottomLeft topRight bottomRight                       ⍝ Draw a gradient-filled rectangle with custom vertex colors
DrawRectangleLinesRAYLIB               ←                     R('DrawRectangleLinesRetPtr'               (i i i i Color                                       )) ⍝ posX posY width height color                                      ⍝ Draw rectangle outline
DrawRectangleLinesExRAYLIB             ←                     R('DrawRectangleLinesExRetPtr'             (Rectangle f Color                                   )) ⍝ rec lineThick color                                               ⍝ Draw rectangle outline with extended parameters
DrawRectangleRoundedRAYLIB             ←                     R('DrawRectangleRoundedRetPtr'             (Rectangle f i Color                                 )) ⍝ rec roundness segments color                                      ⍝ Draw rectangle with rounded edges
DrawRectangleRoundedLinesRAYLIB        ←                     R('DrawRectangleRoundedLinesRetPtr'        (Rectangle f i Color                                 )) ⍝ rec roundness segments color                                      ⍝ Draw rectangle lines with rounded edges
DrawRectangleRoundedLinesExRAYLIB      ←                     R('DrawRectangleRoundedLinesExRetPtr'      (Rectangle f i f Color                               )) ⍝ rec roundness segments lineThick color                            ⍝ Draw rectangle with rounded edges outline
DrawTriangleRAYLIB                     ←                     R('DrawTriangleRetPtr'                     (v2 v2 v2 Color                                      )) ⍝ v1 v2 v3 color                                                    ⍝ Draw a color-filled triangle (vertex in counter-clockwise order!)
DrawTriangleLinesRAYLIB                ←                     R('DrawTriangleLinesRetPtr'                (v2 v2 v2 Color                                      )) ⍝ v1 v2 v3 color                                                    ⍝ Draw triangle outline (vertex in counter-clockwise order!)
DrawTriangleFanRAYLIB                  ←                     R('DrawTriangleFanRetPtr'                  (('<',v2) i Color                                    )) ⍝ points pointCount color                                           ⍝ Draw a triangle fan defined by points (first vertex is the center)
DrawTriangleStripRAYLIB                ←                     R('DrawTriangleStripRetPtr'                (('<',v2) i Color                                    )) ⍝ points pointCount color                                           ⍝ Draw a triangle strip defined by points
DrawPolyRAYLIB                         ←                     R('DrawPolyRetPtr'                         (v2 i f f Color                                      )) ⍝ center sides radius rotation color                                ⍝ Draw a regular polygon (Vector version)
DrawPolyLinesRAYLIB                    ←                     R('DrawPolyLinesRetPtr'                    (v2 i f f Color                                      )) ⍝ center sides radius rotation color                                ⍝ Draw a polygon outline of n sides
DrawPolyLinesExRAYLIB                  ←                     R('DrawPolyLinesExRetPtr'                  (v2 i f f f Color                                    )) ⍝ center sides radius rotation lineThick color                      ⍝ Draw a polygon outline of n sides with extended parameters
DrawSplineLinearRAYLIB                 ←                     R('DrawSplineLinearRetPtr'                 (('<',v2) i f Color                                  )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Linear, minimum 2 points
DrawSplineBasisRAYLIB                  ←                     R('DrawSplineBasisRetPtr'                  (('<',v2) i f Color                                  )) ⍝ points pointCount thick color                                     ⍝ Draw spline: B-Spline, minimum 4 points
DrawSplineCatmullRomRAYLIB             ←                     R('DrawSplineCatmullRomRetPtr'             (('<',v2) i f Color                                  )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Catmull-Rom, minimum 4 points
DrawSplineBezierQuadraticRAYLIB        ←                     R('DrawSplineBezierQuadraticRetPtr'        (('<',v2) i f Color                                  )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Quadratic Bezier, minimum 3 points (1 control point): [p1, c2, p3, c4...]
DrawSplineBezierCubicRAYLIB            ←                     R('DrawSplineBezierCubicRetPtr'            (('<',v2) i f Color                                  )) ⍝ points pointCount thick color                                     ⍝ Draw spline: Cubic Bezier, minimum 4 points (2 control points): [p1, c2, c3, p4, c5, c6...]
DrawSplineSegmentLinearRAYLIB          ←                     R('DrawSplineSegmentLinearRetPtr'          (v2 v2 f Color                                       )) ⍝ p1 p2 thick color                                                 ⍝ Draw spline segment: Linear, 2 points
DrawSplineSegmentBasisRAYLIB           ←                     R('DrawSplineSegmentBasisRetPtr'           (v2 v2 v2 v2 f Color                                 )) ⍝ p1 p2 p3 p4 thick color                                           ⍝ Draw spline segment: B-Spline, 4 points
DrawSplineSegmentCatmullRomRAYLIB      ←                     R('DrawSplineSegmentCatmullRomRetPtr'      (v2 v2 v2 v2 f Color                                 )) ⍝ p1 p2 p3 p4 thick color                                           ⍝ Draw spline segment: Catmull-Rom, 4 points
DrawSplineSegmentBezierQuadraticRAYLIB ←                     R('DrawSplineSegmentBezierQuadraticRetPtr' (v2 v2 v2 f Color                                    )) ⍝ p1 c2 p3 thick color                                              ⍝ Draw spline segment: Quadratic Bezier, 2 points, 1 control point
DrawSplineSegmentBezierCubicRAYLIB     ←                     R('DrawSplineSegmentBezierCubicRetPtr'     (v2 v2 v2 v2 f Color                                 )) ⍝ p1 c2 c3 p4 thick color                                           ⍝ Draw spline segment: Cubic Bezier, 2 points, 2 control points
GetSplinePointLinearRAYLIB             ←                     R('GetSplinePointLinearRetPtr'             (('>',v2) v2 v2 f                                    )) ⍝ startPos endPos t                                                 ⍝ Get (evaluate) spline point: Linear
GetSplinePointBasisRAYLIB              ←                     R('GetSplinePointBasisRetPtr'              (('>',v2) v2 v2 v2 v2 f                              )) ⍝ p1 p2 p3 p4 t                                                     ⍝ Get (evaluate) spline point: B-Spline
GetSplinePointCatmullRomRAYLIB         ←                     R('GetSplinePointCatmullRomRetPtr'         (('>',v2) v2 v2 v2 v2 f                              )) ⍝ p1 p2 p3 p4 t                                                     ⍝ Get (evaluate) spline point: Catmull-Rom
GetSplinePointBezierQuadRAYLIB         ←                     R('GetSplinePointBezierQuadRetPtr'         (('>',v2) v2 v2 v2 f                                 )) ⍝ p1 c2 p3 t                                                        ⍝ Get (evaluate) spline point: Quadratic Bezier
GetSplinePointBezierCubicRAYLIB        ←                     R('GetSplinePointBezierCubicRetPtr'        (('>',v2) v2 v2 v2 v2 f                              )) ⍝ p1 c2 c3 p4 t                                                     ⍝ Get (evaluate) spline point: Cubic Bezier
CheckCollisionRecsRAYLIB               ←                     R('CheckCollisionRecsRetPtr'               (('>',bool) Rectangle Rectangle                      )) ⍝ rec1 rec2                                                         ⍝ Check collision between two rectangles
CheckCollisionCirclesRAYLIB            ←                     R('CheckCollisionCirclesRetPtr'            (('>',bool) v2 f v2 f                                )) ⍝ center1 radius1 center2 radius2                                   ⍝ Check collision between two circles
CheckCollisionCircleRecRAYLIB          ←                     R('CheckCollisionCircleRecRetPtr'          (('>',bool) v2 f Rectangle                           )) ⍝ center radius rec                                                 ⍝ Check collision between circle and rectangle
CheckCollisionCircleLineRAYLIB         ←                     R('CheckCollisionCircleLineRetPtr'         (('>',bool) v2 f v2 v2                               )) ⍝ center radius p1 p2                                               ⍝ Check if circle collides with a line created betweeen two points [p1] and [p2]
CheckCollisionPointRecRAYLIB           ←                     R('CheckCollisionPointRecRetPtr'           (('>',bool) v2 Rectangle                             )) ⍝ point rec                                                         ⍝ Check if point is inside rectangle
CheckCollisionPointCircleRAYLIB        ←                     R('CheckCollisionPointCircleRetPtr'        (('>',bool) v2 v2 f                                  )) ⍝ point center radius                                               ⍝ Check if point is inside circle
CheckCollisionPointTriangleRAYLIB      ←                     R('CheckCollisionPointTriangleRetPtr'      (('>',bool) v2 v2 v2 v2                              )) ⍝ point p1 p2 p3                                                    ⍝ Check if point is inside a triangle
CheckCollisionPointLineRAYLIB          ←                     R('CheckCollisionPointLineRetPtr'          (('>',bool) v2 v2 v2 i                               )) ⍝ point p1 p2 threshold                                             ⍝ Check if point belongs to line created between two points [p1] and [p2] with defined margin in pixels [threshold]
CheckCollisionPointPolyRAYLIB          ←                     R('CheckCollisionPointPolyRetPtr'          (('>',bool) v2 ('<',v2) i                            )) ⍝ point points pointCount                                           ⍝ Check if point is within a polygon described by array of vertices
CheckCollisionLinesRAYLIB              ←                     R('CheckCollisionLinesRetPtr'              (('>',bool) v2 v2 v2 v2 ('=',v2)                     )) ⍝ startPos1 endPos1 startPos2 endPos2 collisionPoint                ⍝ Check the collision between two lines defined by two points each, returns collision point by reference
GetCollisionRecRAYLIB                  ←                     R('GetCollisionRecRetPtr'                  (('>',Rectangle) Rectangle Rectangle                 )) ⍝ rec1 rec2                                                         ⍝ Get collision rectangle for two rectangles collision
LoadImageRAYLIB                        ←                     R('LoadImageRetPtr'                        (('>',Image) str                                     )) ⍝ fileName                                                          ⍝ Load image from file into CPU memory (RAM)
LoadImageRawRAYLIB                     ←                     R('LoadImageRawRetPtr'                     (('>',Image) str i i i i                             )) ⍝ fileName width height format headerSize                           ⍝ Load image from RAW file data
LoadImageAnimRAYLIB                    ←                     R('LoadImageAnimRetPtr'                    (('>',Image) str ('=',i)                             )) ⍝ fileName frames                                                   ⍝ Load image sequence from file (frames appended to image.data)
LoadImageAnimFromMemoryRAYLIB          ←                     R('LoadImageAnimFromMemoryRetPtr'          (('>',Image) str ustr i ('=',i)                      )) ⍝ fileType fileData dataSize frames                                 ⍝ Load image sequence from memory buffer
LoadImageFromMemoryRAYLIB              ←                     R('LoadImageFromMemoryRetPtr'              (('>',Image) str ustr i                              )) ⍝ fileType fileData dataSize                                        ⍝ Load image from memory buffer, fileType refers to extension: i.e. '.png'
LoadImageFromTextureRAYLIB             ←                     R('LoadImageFromTextureRetPtr'             (('>',Image) Texture2D                               )) ⍝ texture                                                           ⍝ Load image from GPU texture data
LoadImageFromScreenRAYLIB              ←                     R('LoadImageFromScreenRetPtr'              (,⊂ ('>',Image)                                      )) ⍝                                                                   ⍝ Load image from screen buffer and (screenshot)
IsImageValidRAYLIB                     ←                     R('IsImageValidRetPtr'                     (('>',bool) Image                                    )) ⍝ image                                                             ⍝ Check if an image is valid (data and parameters)
UnloadImageRAYLIB                      ←                     R('UnloadImageRetPtr'                      (,⊂ Image                                            )) ⍝ image                                                             ⍝ Unload image from CPU memory (RAM)
ExportImageRAYLIB                      ←                     R('ExportImageRetPtr'                      (('>',bool) Image str                                )) ⍝ image fileName                                                    ⍝ Export image data to file, returns true on success
ExportImageToMemoryRAYLIB              ←                     R('ExportImageToMemoryRetPtr'              (('>',ustr) Image str ('=',i)                        )) ⍝ image fileType fileSize                                           ⍝ Export image to memory buffer
ExportImageAsCodeRAYLIB                ←                     R('ExportImageAsCodeRetPtr'                (('>',bool) Image str                                )) ⍝ image fileName                                                    ⍝ Export image as code file defining an array of bytes, returns true on success
GenImageColorRAYLIB                    ←                     R('GenImageColorRetPtr'                    (('>',Image) i i Color                               )) ⍝ width height color                                                ⍝ Generate image: plain color
GenImageGradientLinearRAYLIB           ←                     R('GenImageGradientLinearRetPtr'           (('>',Image) i i i Color Color                       )) ⍝ width height direction start end                                  ⍝ Generate image: linear gradient, direction in degrees [0..360], 0=Vertical gradient
GenImageGradientRadialRAYLIB           ←                     R('GenImageGradientRadialRetPtr'           (('>',Image) i i f Color Color                       )) ⍝ width height density inner outer                                  ⍝ Generate image: radial gradient
GenImageGradientSquareRAYLIB           ←                     R('GenImageGradientSquareRetPtr'           (('>',Image) i i f Color Color                       )) ⍝ width height density inner outer                                  ⍝ Generate image: square gradient
GenImageCheckedRAYLIB                  ←                     R('GenImageCheckedRetPtr'                  (('>',Image) i i i i Color Color                     )) ⍝ width height checksX checksY col1 col2                            ⍝ Generate image: checked
GenImageWhiteNoiseRAYLIB               ←                     R('GenImageWhiteNoiseRetPtr'               (('>',Image) i i f                                   )) ⍝ width height factor                                               ⍝ Generate image: white noise
GenImagePerlinNoiseRAYLIB              ←                     R('GenImagePerlinNoiseRetPtr'              (('>',Image) i i i i f                               )) ⍝ width height offsetX offsetY scale                                ⍝ Generate image: perlin noise
GenImageCellularRAYLIB                 ←                     R('GenImageCellularRetPtr'                 (('>',Image) i i i                                   )) ⍝ width height tileSize                                             ⍝ Generate image: cellular algorithm, bigger tileSize means bigger cells
GenImageTextRAYLIB                     ←                     R('GenImageTextRetPtr'                     (('>',Image) i i str                                 )) ⍝ width height text                                                 ⍝ Generate image: grayscale image from text data
ImageCopyRAYLIB                        ←                     R('ImageCopyRetPtr'                        (('>',Image) Image                                   )) ⍝ image                                                             ⍝ Create an image duplicate (useful for transformations)
ImageFromImageRAYLIB                   ←                     R('ImageFromImageRetPtr'                   (('>',Image) Image Rectangle                         )) ⍝ image rec                                                         ⍝ Create an image from another image piece
ImageFromChannelRAYLIB                 ←                     R('ImageFromChannelRetPtr'                 (('>',Image) Image i                                 )) ⍝ image selectedChannel                                             ⍝ Create an image from a selected channel of another image (GRAYSCALE)
ImageTextRAYLIB                        ←                     R('ImageTextRetPtr'                        (('>',Image) str i Color                             )) ⍝ text fontSize color                                               ⍝ Create an image from text (default font)
ImageTextExRAYLIB                      ←                     R('ImageTextExRetPtr'                      (('>',Image) Font str f f Color                      )) ⍝ font text fontSize spacing tint                                   ⍝ Create an image from text (custom sprite font)
ImageFormatRAYLIB                      ←                     R('ImageFormatRetPtr'                      (('=',Image) i                                       )) ⍝ image newFormat                                                   ⍝ Convert image data to desired format
ImageToPOTRAYLIB                       ←                     R('ImageToPOTRetPtr'                       (('=',Image) Color                                   )) ⍝ image fill                                                        ⍝ Convert image to POT (power-of-two)
ImageCropRAYLIB                        ←                     R('ImageCropRetPtr'                        (('=',Image) Rectangle                               )) ⍝ image crop                                                        ⍝ Crop an image to a defined rectangle
ImageAlphaCropRAYLIB                   ←                     R('ImageAlphaCropRetPtr'                   (('=',Image) f                                       )) ⍝ image threshold                                                   ⍝ Crop image depending on alpha value
ImageAlphaClearRAYLIB                  ←                     R('ImageAlphaClearRetPtr'                  (('=',Image) Color f                                 )) ⍝ image color threshold                                             ⍝ Clear alpha channel to desired color
ImageAlphaMaskRAYLIB                   ←                     R('ImageAlphaMaskRetPtr'                   (('=',Image) Image                                   )) ⍝ image alphaMask                                                   ⍝ Apply alpha mask to image
ImageAlphaPremultiplyRAYLIB            ←                     R('ImageAlphaPremultiplyRetPtr'            (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Premultiply alpha channel
ImageBlurGaussianRAYLIB                ←                     R('ImageBlurGaussianRetPtr'                (('=',Image) i                                       )) ⍝ image blurSize                                                    ⍝ Apply Gaussian blur using a box blur approximation
ImageKernelConvolutionRAYLIB           ←                     R('ImageKernelConvolutionRetPtr'           (('=',Image) ('<',f) i                               )) ⍝ image kernel kernelSize                                           ⍝ Apply custom square convolution kernel to image
ImageResizeRAYLIB                      ←                     R('ImageResizeRetPtr'                      (('=',Image) i i                                     )) ⍝ image newWidth newHeight                                          ⍝ Resize image (Bicubic scaling algorithm)
ImageResizeNNRAYLIB                    ←                     R('ImageResizeNNRetPtr'                    (('=',Image) i i                                     )) ⍝ image newWidth newHeight                                          ⍝ Resize image (Nearest-Neighbor scaling algorithm)
ImageResizeCanvasRAYLIB                ←                     R('ImageResizeCanvasRetPtr'                (('=',Image) i i i i Color                           )) ⍝ image newWidth newHeight offsetX offsetY fill                     ⍝ Resize canvas and fill with color
ImageMipmapsRAYLIB                     ←                     R('ImageMipmapsRetPtr'                     (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Compute all mipmap levels for a provided image
ImageDitherRAYLIB                      ←                     R('ImageDitherRetPtr'                      (('=',Image) i i i i                                 )) ⍝ image rBpp gBpp bBpp aBpp                                         ⍝ Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
ImageFlipVerticalRAYLIB                ←                     R('ImageFlipVerticalRetPtr'                (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Flip image vertically
ImageFlipHorizontalRAYLIB              ←                     R('ImageFlipHorizontalRetPtr'              (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Flip image horizontally
ImageRotateRAYLIB                      ←                     R('ImageRotateRetPtr'                      (('=',Image) i                                       )) ⍝ image degrees                                                     ⍝ Rotate image by input angle in degrees (-359 to 359)
ImageRotateCWRAYLIB                    ←                     R('ImageRotateCWRetPtr'                    (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Rotate image clockwise 90deg
ImageRotateCCWRAYLIB                   ←                     R('ImageRotateCCWRetPtr'                   (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Rotate image counter-clockwise 90deg
ImageColorTintRAYLIB                   ←                     R('ImageColorTintRetPtr'                   (('=',Image) Color                                   )) ⍝ image color                                                       ⍝ Modify image color: tint
ImageColorInvertRAYLIB                 ←                     R('ImageColorInvertRetPtr'                 (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Modify image color: invert
ImageColorGrayscaleRAYLIB              ←                     R('ImageColorGrayscaleRetPtr'              (,⊂ ('=',Image)                                      )) ⍝ image                                                             ⍝ Modify image color: grayscale
ImageColorContrastRAYLIB               ←                     R('ImageColorContrastRetPtr'               (('=',Image) f                                       )) ⍝ image contrast                                                    ⍝ Modify image color: contrast (-100 to 100)
ImageColorBrightnessRAYLIB             ←                     R('ImageColorBrightnessRetPtr'             (('=',Image) i                                       )) ⍝ image brightness                                                  ⍝ Modify image color: brightness (-255 to 255)
ImageColorReplaceRAYLIB                ←                     R('ImageColorReplaceRetPtr'                (('=',Image) Color Color                             )) ⍝ image color replace                                               ⍝ Modify image color: replace color
LoadImageColorsRAYLIB                  ←                     R('LoadImageColorsRetPtr'                  (ptr Image                                           )) ⍝ image                                                             ⍝ Load color data from image as a Color array (RGBA - 32bit)
LoadImagePaletteRAYLIB                 ←                     R('LoadImagePaletteRetPtr'                 (ptr Image i ('=',i)                                 )) ⍝ image maxPaletteSize colorCount                                   ⍝ Load colors palette from image as a Color array (RGBA - 32bit)
UnloadImageColorsRAYLIB                ←                     R('UnloadImageColorsRetPtr'                (,⊂ ('=',Color)                                      )) ⍝ colors                                                            ⍝ Unload color data loaded with LoadImageColors()
UnloadImagePaletteRAYLIB               ←                     R('UnloadImagePaletteRetPtr'               (,⊂ ('=',Color)                                      )) ⍝ colors                                                            ⍝ Unload colors palette loaded with LoadImagePalette()
GetImageAlphaBorderRAYLIB              ←                     R('GetImageAlphaBorderRetPtr'              (('>',Rectangle) Image f                             )) ⍝ image threshold                                                   ⍝ Get image alpha border rectangle
GetImageColorRAYLIB                    ←                     R('GetImageColorRetPtr'                    (('>',Color) Image i i                               )) ⍝ image x y                                                         ⍝ Get image pixel color at (x, y) position
ImageClearBackgroundRAYLIB             ←                     R('ImageClearBackgroundRetPtr'             (('=',Image) Color                                   )) ⍝ dst color                                                         ⍝ Clear image background with given color
ImageDrawPixelRAYLIB                   ←                     R('ImageDrawPixelRetPtr'                   (('=',Image) i i Color                               )) ⍝ dst posX posY color                                               ⍝ Draw pixel within an image
ImageDrawPixelVRAYLIB                  ←                     R('ImageDrawPixelVRetPtr'                  (('=',Image) v2 Color                                )) ⍝ dst position color                                                ⍝ Draw pixel within an image (Vector version)
ImageDrawLineRAYLIB                    ←                     R('ImageDrawLineRetPtr'                    (('=',Image) i i i i Color                           )) ⍝ dst startPosX startPosY endPosX endPosY color                     ⍝ Draw line within an image
ImageDrawLineVRAYLIB                   ←                     R('ImageDrawLineVRetPtr'                   (('=',Image) v2 v2 Color                             )) ⍝ dst start end color                                               ⍝ Draw line within an image (Vector version)
ImageDrawLineExRAYLIB                  ←                     R('ImageDrawLineExRetPtr'                  (('=',Image) v2 v2 i Color                           )) ⍝ dst start end thick color                                         ⍝ Draw a line defining thickness within an image
ImageDrawCircleRAYLIB                  ←                     R('ImageDrawCircleRetPtr'                  (('=',Image) i i i Color                             )) ⍝ dst centerX centerY radius color                                  ⍝ Draw a filled circle within an image
ImageDrawCircleVRAYLIB                 ←                     R('ImageDrawCircleVRetPtr'                 (('=',Image) v2 i Color                              )) ⍝ dst center radius color                                           ⍝ Draw a filled circle within an image (Vector version)
ImageDrawCircleLinesRAYLIB             ←                     R('ImageDrawCircleLinesRetPtr'             (('=',Image) i i i Color                             )) ⍝ dst centerX centerY radius color                                  ⍝ Draw circle outline within an image
ImageDrawCircleLinesVRAYLIB            ←                     R('ImageDrawCircleLinesVRetPtr'            (('=',Image) v2 i Color                              )) ⍝ dst center radius color                                           ⍝ Draw circle outline within an image (Vector version)
ImageDrawRectangleRAYLIB               ←                     R('ImageDrawRectangleRetPtr'               (('=',Image) i i i i Color                           )) ⍝ dst posX posY width height color                                  ⍝ Draw rectangle within an image
ImageDrawRectangleVRAYLIB              ←                     R('ImageDrawRectangleVRetPtr'              (('=',Image) v2 v2 Color                             )) ⍝ dst position size color                                           ⍝ Draw rectangle within an image (Vector version)
ImageDrawRectangleRecRAYLIB            ←                     R('ImageDrawRectangleRecRetPtr'            (('=',Image) Rectangle Color                         )) ⍝ dst rec color                                                     ⍝ Draw rectangle within an image
ImageDrawRectangleLinesRAYLIB          ←                     R('ImageDrawRectangleLinesRetPtr'          (('=',Image) Rectangle i Color                       )) ⍝ dst rec thick color                                               ⍝ Draw rectangle lines within an image
ImageDrawTriangleRAYLIB                ←                     R('ImageDrawTriangleRetPtr'                (('=',Image) v2 v2 v2 Color                          )) ⍝ dst v1 v2 v3 color                                                ⍝ Draw triangle within an image
ImageDrawTriangleExRAYLIB              ←                     R('ImageDrawTriangleExRetPtr'              (('=',Image) v2 v2 v2 Color Color Color              )) ⍝ dst v1 v2 v3 c1 c2 c3                                             ⍝ Draw triangle with interpolated colors within an image
ImageDrawTriangleLinesRAYLIB           ←                     R('ImageDrawTriangleLinesRetPtr'           (('=',Image) v2 v2 v2 Color                          )) ⍝ dst v1 v2 v3 color                                                ⍝ Draw triangle outline within an image
ImageDrawTriangleFanRAYLIB             ←                     R('ImageDrawTriangleFanRetPtr'             (('=',Image) ('=',v2) i Color                        )) ⍝ dst points pointCount color                                       ⍝ Draw a triangle fan defined by points within an image (first vertex is the center)
ImageDrawTriangleStripRAYLIB           ←                     R('ImageDrawTriangleStripRetPtr'           (('=',Image) ('=',v2) i Color                        )) ⍝ dst points pointCount color                                       ⍝ Draw a triangle strip defined by points within an image
ImageDrawRAYLIB                        ←                     R('ImageDrawRetPtr'                        (('=',Image) Image Rectangle Rectangle Color         )) ⍝ dst src srcRec dstRec tint                                        ⍝ Draw a source image within a destination image (tint applied to source)
ImageDrawTextRAYLIB                    ←                     R('ImageDrawTextRetPtr'                    (('=',Image) str i i i Color                         )) ⍝ dst text posX posY fontSize color                                 ⍝ Draw text (using default font) within an image (destination)
ImageDrawTextExRAYLIB                  ←                     R('ImageDrawTextExRetPtr'                  (('=',Image) Font str v2 f f Color                   )) ⍝ dst font text position fontSize spacing tint                      ⍝ Draw text (custom sprite font) within an image (destination)
LoadTextureRAYLIB                      ←                     R('LoadTextureRetPtr'                      (('>',Texture2D) str                                 )) ⍝ fileName                                                          ⍝ Load texture from file into GPU memory (VRAM)
LoadTextureFromImageRAYLIB             ←                     R('LoadTextureFromImageRetPtr'             (('>',Texture2D) Image                               )) ⍝ image                                                             ⍝ Load texture from image data
LoadTextureCubemapRAYLIB               ←                     R('LoadTextureCubemapRetPtr'               (('>',TextureCubemap) Image i                        )) ⍝ image layout                                                      ⍝ Load cubemap from image, multiple image cubemap layouts supported
LoadRenderTextureRAYLIB                ←                     R('LoadRenderTextureRetPtr'                (('>',RenderTexture2D) i i                           )) ⍝ width height                                                      ⍝ Load texture for rendering (framebuffer)
IsTextureValidRAYLIB                   ←                     R('IsTextureValidRetPtr'                   (('>',bool) Texture2D                                )) ⍝ texture                                                           ⍝ Check if a texture is valid (loaded in GPU)
UnloadTextureRAYLIB                    ←                     R('UnloadTextureRetPtr'                    (,⊂ Texture2D                                        )) ⍝ texture                                                           ⍝ Unload texture from GPU memory (VRAM)
IsRenderTextureValidRAYLIB             ←                     R('IsRenderTextureValidRetPtr'             (('>',bool) RenderTexture2D                          )) ⍝ target                                                            ⍝ Check if a render texture is valid (loaded in GPU)
UnloadRenderTextureRAYLIB              ←                     R('UnloadRenderTextureRetPtr'              (,⊂ RenderTexture2D                                  )) ⍝ target                                                            ⍝ Unload render texture from GPU memory (VRAM)
UpdateTextureRAYLIB                    ←                     R('UpdateTextureRetPtr'                    (Texture2D ptr                                       )) ⍝ texture pixels                                                    ⍝ Update GPU texture with new data
UpdateTextureRecRAYLIB                 ←                     R('UpdateTextureRecRetPtr'                 (Texture2D Rectangle ptr                             )) ⍝ texture rec pixels                                                ⍝ Update GPU texture rectangle with new data
GenTextureMipmapsRAYLIB                ←                     R('GenTextureMipmapsRetPtr'                (,⊂ ('=',Texture2D)                                  )) ⍝ texture                                                           ⍝ Generate GPU mipmaps for a texture
SetTextureFilterRAYLIB                 ←                     R('SetTextureFilterRetPtr'                 (Texture2D i                                         )) ⍝ texture filter                                                    ⍝ Set texture scaling filter mode
SetTextureWrapRAYLIB                   ←                     R('SetTextureWrapRetPtr'                   (Texture2D i                                         )) ⍝ texture wrap                                                      ⍝ Set texture wrapping mode
DrawTextureRAYLIB                      ←                     R('DrawTextureRetPtr'                      (Texture2D i i Color                                 )) ⍝ texture posX posY tint                                            ⍝ Draw a Texture2D
DrawTextureVRAYLIB                     ←                     R('DrawTextureVRetPtr'                     (Texture2D v2 Color                                  )) ⍝ texture position tint                                             ⍝ Draw a Texture2D with position defined as Vector2
DrawTextureExRAYLIB                    ←                     R('DrawTextureExRetPtr'                    (Texture2D v2 f f Color                              )) ⍝ texture position rotation scale tint                              ⍝ Draw a Texture2D with extended parameters
DrawTextureRecRAYLIB                   ←                     R('DrawTextureRecRetPtr'                   (Texture2D Rectangle v2 Color                        )) ⍝ texture source position tint                                      ⍝ Draw a part of a texture defined by a rectangle
DrawTextureProRAYLIB                   ←                     R('DrawTextureProRetPtr'                   (Texture2D Rectangle Rectangle v2 f Color            )) ⍝ texture source dest origin rotation tint                          ⍝ Draw a part of a texture defined by a rectangle with 'pro' parameters
DrawTextureNPatchRAYLIB                ←                     R('DrawTextureNPatchRetPtr'                (Texture2D NPatchInfo Rectangle v2 f Color           )) ⍝ texture nPatchInfo dest origin rotation tint                      ⍝ Draws a texture (or part of it) that stretches or shrinks nicely
ColorIsEqualRAYLIB                     ←                     R('ColorIsEqualRetPtr'                     (('>',bool) Color Color                              )) ⍝ col1 col2                                                         ⍝ Check if two colors are equal
FadeRAYLIB                             ←                     R('FadeRetPtr'                             (('>',Color) Color f                                 )) ⍝ color alpha                                                       ⍝ Get color with alpha applied, alpha goes from 0.0f to 1.0f
ColorToIntRAYLIB                       ←                     R('ColorToIntRetPtr'                       (('>',i) Color                                       )) ⍝ color                                                             ⍝ Get hexadecimal value for a Color (0xRRGGBBAA)
ColorNormalizeRAYLIB                   ←                     R('ColorNormalizeRetPtr'                   (('>',v4) Color                                      )) ⍝ color                                                             ⍝ Get Color normalized as float [0..1]
ColorFromNormalizedRAYLIB              ←                     R('ColorFromNormalizedRetPtr'              (('>',Color) v4                                      )) ⍝ normalized                                                        ⍝ Get Color from normalized values [0..1]
ColorToHSVRAYLIB                       ←                     R('ColorToHSVRetPtr'                       (('>',v3) Color                                      )) ⍝ color                                                             ⍝ Get HSV values for a Color, hue [0..360], saturation/value [0..1]
ColorFromHSVRAYLIB                     ←                     R('ColorFromHSVRetPtr'                     (('>',Color) f f f                                   )) ⍝ hue saturation value                                              ⍝ Get a Color from HSV values, hue [0..360], saturation/value [0..1]
ColorTintRAYLIB                        ←                     R('ColorTintRetPtr'                        (('>',Color) Color Color                             )) ⍝ color tint                                                        ⍝ Get color multiplied with another color
ColorBrightnessRAYLIB                  ←                     R('ColorBrightnessRetPtr'                  (('>',Color) Color f                                 )) ⍝ color factor                                                      ⍝ Get color with brightness correction, brightness factor goes from -1.0f to 1.0f
ColorContrastRAYLIB                    ←                     R('ColorContrastRetPtr'                    (('>',Color) Color f                                 )) ⍝ color contrast                                                    ⍝ Get color with contrast correction, contrast values between -1.0f and 1.0f
ColorAlphaRAYLIB                       ←                     R('ColorAlphaRetPtr'                       (('>',Color) Color f                                 )) ⍝ color alpha                                                       ⍝ Get color with alpha applied, alpha goes from 0.0f to 1.0f
ColorAlphaBlendRAYLIB                  ←                     R('ColorAlphaBlendRetPtr'                  (('>',Color) Color Color Color                       )) ⍝ dst src tint                                                      ⍝ Get src alpha-blended into dst color with tint
ColorLerpRAYLIB                        ←                     R('ColorLerpRetPtr'                        (('>',Color) Color Color f                           )) ⍝ color1 color2 factor                                              ⍝ Get color lerp interpolation between two colors, factor [0.0f..1.0f]
GetColorRAYLIB                         ←                     R('GetColorRetPtr'                         (('>',Color) u                                       )) ⍝ hexValue                                                          ⍝ Get Color structure from hexadecimal value
GetPixelColorRAYLIB                    ←                     R('GetPixelColorRetPtr'                    (('>',Color) ptr i                                   )) ⍝ srcPtr format                                                     ⍝ Get Color from a source pixel pointer of certain format
SetPixelColorRAYLIB                    ←                     R('SetPixelColorRetPtr'                    (ptr Color i                                         )) ⍝ dstPtr color format                                               ⍝ Set color formatted into destination pixel pointer
GetPixelDataSizeRAYLIB                 ←                     R('GetPixelDataSizeRetPtr'                 (('>',i) i i i                                       )) ⍝ width height format                                               ⍝ Get pixel data size in bytes for certain format
GetFontDefaultRAYLIB                   ←                     R('GetFontDefaultRetPtr'                   (,⊂ ('>',Font)                                       )) ⍝                                                                   ⍝ Get the default Font
LoadFontRAYLIB                         ←                     R('LoadFontRetPtr'                         (('>',Font) str                                      )) ⍝ fileName                                                          ⍝ Load font from file into GPU memory (VRAM)
LoadFontExRAYLIB                       ←                     R('LoadFontExRetPtr'                       (('>',Font) str i ('=',i) i                          )) ⍝ fileName fontSize codepoints codepointCount                       ⍝ Load font from file with extended parameters, use NULL for codepoints and 0 for codepointCount to load the default character set, font size is provided in pixels height
LoadFontFromImageRAYLIB                ←                     R('LoadFontFromImageRetPtr'                (('>',Font) Image Color i                            )) ⍝ image key firstChar                                               ⍝ Load font from Image (XNA style)
LoadFontFromMemoryRAYLIB               ←                     R('LoadFontFromMemoryRetPtr'               (('>',Font) str ustr i i ('=',i) i                   )) ⍝ fileType fileData dataSize fontSize codepoints codepointCount     ⍝ Load font from memory buffer, fileType refers to extension: i.e. '.ttf'
IsFontValidRAYLIB                      ←                     R('IsFontValidRetPtr'                      (('>',bool) Font                                     )) ⍝ font                                                              ⍝ Check if a font is valid (font data loaded, WARNING: GPU texture not checked)
LoadFontDataRAYLIB                     ←                     R('LoadFontDataRetPtr'                     (ptr ustr i i ('=',i) i i                            )) ⍝ fileData dataSize fontSize codepoints codepointCount type         ⍝ Load font data for further use
GenImageFontAtlasRAYLIB                ←                     R('GenImageFontAtlasRetPtr'                (('>',Image) ('<',GlyphInfo) ('==',Rectangle) i i i i)) ⍝ glyphs glyphRecs glyphCount fontSize padding packMethod           ⍝ Generate image font atlas using chars info
UnloadFontDataRAYLIB                   ←                     R('UnloadFontDataRetPtr'                   (('=',GlyphInfo) i                                   )) ⍝ glyphs glyphCount                                                 ⍝ Unload font chars info data (RAM)
UnloadFontRAYLIB                       ←                     R('UnloadFontRetPtr'                       (,⊂ Font                                             )) ⍝ font                                                              ⍝ Unload font from GPU memory (VRAM)
ExportFontAsCodeRAYLIB                 ←                     R('ExportFontAsCodeRetPtr'                 (('>',bool) Font str                                 )) ⍝ font fileName                                                     ⍝ Export font as code file, returns true on success
DrawFPSRAYLIB                          ←                     R('DrawFPSRetPtr'                          (i i                                                 )) ⍝ posX posY                                                         ⍝ Draw current FPS
DrawTextRAYLIB                         ←                     R('DrawTextRetPtr'                         (str i i i Color                                     )) ⍝ text posX posY fontSize color                                     ⍝ Draw text (using default font)
DrawTextExRAYLIB                       ←                     R('DrawTextExRetPtr'                       (Font str v2 f f Color                               )) ⍝ font text position fontSize spacing tint                          ⍝ Draw text using font and additional parameters
DrawTextProRAYLIB                      ←                     R('DrawTextProRetPtr'                      (Font str v2 v2 f f f Color                          )) ⍝ font text position origin rotation fontSize spacing tint          ⍝ Draw text using Font and pro parameters (rotation)
DrawTextCodepointRAYLIB                ←                     R('DrawTextCodepointRetPtr'                (Font i v2 f Color                                   )) ⍝ font codepoint position fontSize tint                             ⍝ Draw one character (codepoint)
DrawTextCodepointsRAYLIB               ←                     R('DrawTextCodepointsRetPtr'               (Font ('<',i) i v2 f f Color                         )) ⍝ font codepoints codepointCount position fontSize spacing tint     ⍝ Draw multiple character (codepoint)
SetTextLineSpacingRAYLIB               ←                     R('SetTextLineSpacingRetPtr'               (,⊂ i                                                )) ⍝ spacing                                                           ⍝ Set vertical line spacing when drawing with line-breaks
MeasureTextRAYLIB                      ←                     R('MeasureTextRetPtr'                      (('>',i) str i                                       )) ⍝ text fontSize                                                     ⍝ Measure string width for default font
MeasureTextExRAYLIB                    ←                     R('MeasureTextExRetPtr'                    (('>',v2) Font str f f                               )) ⍝ font text fontSize spacing                                        ⍝ Measure string size for Font
GetGlyphIndexRAYLIB                    ←                     R('GetGlyphIndexRetPtr'                    (('>',i) Font i                                      )) ⍝ font codepoint                                                    ⍝ Get glyph index position in font for a codepoint (unicode character), fallback to '?' if not found
GetGlyphInfoRAYLIB                     ←                     R('GetGlyphInfoRetPtr'                     (('>',GlyphInfo) Font i                              )) ⍝ font codepoint                                                    ⍝ Get glyph font info data for a codepoint (unicode character), fallback to '?' if not found
GetGlyphAtlasRecRAYLIB                 ←                     R('GetGlyphAtlasRecRetPtr'                 (('>',Rectangle) Font i                              )) ⍝ font codepoint                                                    ⍝ Get glyph rectangle in font atlas for a codepoint (unicode character), fallback to '?' if not found
LoadUTF8RAYLIB                         ←                     R('LoadUTF8RetPtr'                         (('>',str) ('<',i) i                                 )) ⍝ codepoints length                                                 ⍝ Load UTF-8 text encoded from codepoints array
UnloadUTF8RAYLIB                       ←                     R('UnloadUTF8RetPtr'                       (,⊂ str                                              )) ⍝ text                                                              ⍝ Unload UTF-8 text encoded from codepoints array
LoadCodepointsRAYLIB                   ←                     R('LoadCodepointsRetPtr'                   (ptr str ('=',i)                                     )) ⍝ text count                                                        ⍝ Load all codepoints from a UTF-8 text string, codepoints count returned by parameter
UnloadCodepointsRAYLIB                 ←                     R('UnloadCodepointsRetPtr'                 (,⊂ ('=',i)                                          )) ⍝ codepoints                                                        ⍝ Unload codepoints data from memory
GetCodepointCountRAYLIB                ←                     R('GetCodepointCountRetPtr'                (('>',i) str                                         )) ⍝ text                                                              ⍝ Get total number of codepoints in a UTF-8 encoded string
GetCodepointRAYLIB                     ←                     R('GetCodepointRetPtr'                     (('>',i) str ('=',i)                                 )) ⍝ text codepointSize                                                ⍝ Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
GetCodepointNextRAYLIB                 ←                     R('GetCodepointNextRetPtr'                 (('>',i) str ('=',i)                                 )) ⍝ text codepointSize                                                ⍝ Get next codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
GetCodepointPreviousRAYLIB             ←                     R('GetCodepointPreviousRetPtr'             (('>',i) str ('=',i)                                 )) ⍝ text codepointSize                                                ⍝ Get previous codepoint in a UTF-8 encoded string, 0x3f('?') is returned on failure
CodepointToUTF8RAYLIB                  ←                     R('CodepointToUTF8RetPtr'                  (('>',str) i ('=',i)                                 )) ⍝ codepoint utf8Size                                                ⍝ Encode one codepoint into UTF-8 byte array (array length returned as parameter)
TextCopyRAYLIB                         ←                     R('TextCopyRetPtr'                         (('>',i) str str                                     )) ⍝ dst src                                                           ⍝ Copy one string to another, returns bytes copied
TextIsEqualRAYLIB                      ←                     R('TextIsEqualRetPtr'                      (('>',bool) str str                                  )) ⍝ text1 text2                                                       ⍝ Check if two text string are equal
TextLengthRAYLIB                       ←                     R('TextLengthRetPtr'                       (('>',u) str                                         )) ⍝ text                                                              ⍝ Get text length, checks for '\0' ending
TextFormatRAYLIB                       ←                     R('TextFormatRetPtr'                       (('>',str) str ptr                                   )) ⍝ text args                                                         ⍝ Text formatting with variables (sprintf() style)
TextSubtextRAYLIB                      ←                     R('TextSubtextRetPtr'                      (('>',str) str i i                                   )) ⍝ text position length                                              ⍝ Get a piece of a text string
TextReplaceRAYLIB                      ←                     R('TextReplaceRetPtr'                      (('>',str) str str str                               )) ⍝ text replace by                                                   ⍝ Replace text string (WARNING: memory must be freed!)
TextInsertRAYLIB                       ←                     R('TextInsertRetPtr'                       (('>',str) str str i                                 )) ⍝ text insert position                                              ⍝ Insert text in a position (WARNING: memory must be freed!)
TextJoinRAYLIB                         ←                     R('TextJoinRetPtr'                         (('>',str) ('<',str) i str                           )) ⍝ textList count delimiter                                          ⍝ Join text strings with delimiter
TextSplitRAYLIB                        ←                     R('TextSplitRetPtr'                        (('>',('<',str)) str u1 ('=',i)                      )) ⍝ text delimiter count                                              ⍝ Split text into multiple strings
TextAppendRAYLIB                       ←                     R('TextAppendRetPtr'                       (str str ('=',i)                                     )) ⍝ text append position                                              ⍝ Append text at specific position and move cursor!
TextFindIndexRAYLIB                    ←                     R('TextFindIndexRetPtr'                    (('>',i) str str                                     )) ⍝ text find                                                         ⍝ Find first text occurrence within a string
TextToUpperRAYLIB                      ←                     R('TextToUpperRetPtr'                      (('>',str) str                                       )) ⍝ text                                                              ⍝ Get upper case version of provided string
TextToLowerRAYLIB                      ←                     R('TextToLowerRetPtr'                      (('>',str) str                                       )) ⍝ text                                                              ⍝ Get lower case version of provided string
TextToPascalRAYLIB                     ←                     R('TextToPascalRetPtr'                     (('>',str) str                                       )) ⍝ text                                                              ⍝ Get Pascal case notation version of provided string
TextToSnakeRAYLIB                      ←                     R('TextToSnakeRetPtr'                      (('>',str) str                                       )) ⍝ text                                                              ⍝ Get Snake case notation version of provided string
TextToCamelRAYLIB                      ←                     R('TextToCamelRetPtr'                      (('>',str) str                                       )) ⍝ text                                                              ⍝ Get Camel case notation version of provided string
TextToIntegerRAYLIB                    ←                     R('TextToIntegerRetPtr'                    (('>',i) str                                         )) ⍝ text                                                              ⍝ Get integer value from text (negative values not supported)
TextToFloatRAYLIB                      ←                     R('TextToFloatRetPtr'                      (('>',f) str                                         )) ⍝ text                                                              ⍝ Get float value from text (negative values not supported)
DrawLine3DRAYLIB                       ←                     R('DrawLine3DRetPtr'                       (v3 v3 Color                                         )) ⍝ startPos endPos color                                             ⍝ Draw a line in 3D world space
DrawPoint3DRAYLIB                      ←                     R('DrawPoint3DRetPtr'                      (v3 Color                                            )) ⍝ position color                                                    ⍝ Draw a point in 3D space, actually a small line
DrawCircle3DRAYLIB                     ←                     R('DrawCircle3DRetPtr'                     (v3 f v3 f Color                                     )) ⍝ center radius rotationAxis rotationAngle color                    ⍝ Draw a circle in 3D world space
DrawTriangle3DRAYLIB                   ←                     R('DrawTriangle3DRetPtr'                   (v3 v3 v3 Color                                      )) ⍝ v1 v2 v3 color                                                    ⍝ Draw a color-filled triangle (vertex in counter-clockwise order!)
DrawTriangleStrip3DRAYLIB              ←                     R('DrawTriangleStrip3DRetPtr'              (('<',v3) i Color                                    )) ⍝ points pointCount color                                           ⍝ Draw a triangle strip defined by points
DrawCubeRAYLIB                         ←                     R('DrawCubeRetPtr'                         (v3 f f f Color                                      )) ⍝ position width height length color                                ⍝ Draw cube
DrawCubeVRAYLIB                        ←                     R('DrawCubeVRetPtr'                        (v3 v3 Color                                         )) ⍝ position size color                                               ⍝ Draw cube (Vector version)
DrawCubeWiresRAYLIB                    ←                     R('DrawCubeWiresRetPtr'                    (v3 f f f Color                                      )) ⍝ position width height length color                                ⍝ Draw cube wires
DrawCubeWiresVRAYLIB                   ←                     R('DrawCubeWiresVRetPtr'                   (v3 v3 Color                                         )) ⍝ position size color                                               ⍝ Draw cube wires (Vector version)
DrawSphereRAYLIB                       ←                     R('DrawSphereRetPtr'                       (v3 f Color                                          )) ⍝ centerPos radius color                                            ⍝ Draw sphere
DrawSphereExRAYLIB                     ←                     R('DrawSphereExRetPtr'                     (v3 f i i Color                                      )) ⍝ centerPos radius rings slices color                               ⍝ Draw sphere with extended parameters
DrawSphereWiresRAYLIB                  ←                     R('DrawSphereWiresRetPtr'                  (v3 f i i Color                                      )) ⍝ centerPos radius rings slices color                               ⍝ Draw sphere wires
DrawCylinderRAYLIB                     ←                     R('DrawCylinderRetPtr'                     (v3 f f f i Color                                    )) ⍝ position radiusTop radiusBottom height slices color               ⍝ Draw a cylinder/cone
DrawCylinderExRAYLIB                   ←                     R('DrawCylinderExRetPtr'                   (v3 v3 f f i Color                                   )) ⍝ startPos endPos startRadius endRadius sides color                 ⍝ Draw a cylinder with base at startPos and top at endPos
DrawCylinderWiresRAYLIB                ←                     R('DrawCylinderWiresRetPtr'                (v3 f f f i Color                                    )) ⍝ position radiusTop radiusBottom height slices color               ⍝ Draw a cylinder/cone wires
DrawCylinderWiresExRAYLIB              ←                     R('DrawCylinderWiresExRetPtr'              (v3 v3 f f i Color                                   )) ⍝ startPos endPos startRadius endRadius sides color                 ⍝ Draw a cylinder wires with base at startPos and top at endPos
DrawCapsuleRAYLIB                      ←                     R('DrawCapsuleRetPtr'                      (v3 v3 f i i Color                                   )) ⍝ startPos endPos radius slices rings color                         ⍝ Draw a capsule with the center of its sphere caps at startPos and endPos
DrawCapsuleWiresRAYLIB                 ←                     R('DrawCapsuleWiresRetPtr'                 (v3 v3 f i i Color                                   )) ⍝ startPos endPos radius slices rings color                         ⍝ Draw capsule wireframe with the center of its sphere caps at startPos and endPos
DrawPlaneRAYLIB                        ←                     R('DrawPlaneRetPtr'                        (v3 v2 Color                                         )) ⍝ centerPos size color                                              ⍝ Draw a plane XZ
DrawRayRAYLIB                          ←                     R('DrawRayRetPtr'                          (Ray Color                                           )) ⍝ ray color                                                         ⍝ Draw a ray line
DrawGridRAYLIB                         ←                     R('DrawGridRetPtr'                         (i f                                                 )) ⍝ slices spacing                                                    ⍝ Draw a grid (centered at (0, 0, 0))
LoadModelRAYLIB                        ←                     R('LoadModelRetPtr'                        (('>',Model) str                                     )) ⍝ fileName                                                          ⍝ Load model from files (meshes and materials)
LoadModelFromMeshRAYLIB                ←                     R('LoadModelFromMeshRetPtr'                (('>',Model) Mesh                                    )) ⍝ mesh                                                              ⍝ Load model from generated mesh (default material)
IsModelValidRAYLIB                     ←                     R('IsModelValidRetPtr'                     (('>',bool) Model                                    )) ⍝ model                                                             ⍝ Check if a model is valid (loaded in GPU, VAO/VBOs)
UnloadModelRAYLIB                      ←                     R('UnloadModelRetPtr'                      (,⊂ Model                                            )) ⍝ model                                                             ⍝ Unload model (including meshes) from memory (RAM and/or VRAM)
GetModelBoundingBoxRAYLIB              ←                     R('GetModelBoundingBoxRetPtr'              (('>',BoundingBox) Model                             )) ⍝ model                                                             ⍝ Compute model bounding box limits (considers all meshes)
DrawModelRAYLIB                        ←                     R('DrawModelRetPtr'                        (Model v3 f Color                                    )) ⍝ model position scale tint                                         ⍝ Draw a model (with texture if set)
DrawModelExRAYLIB                      ←                     R('DrawModelExRetPtr'                      (Model v3 v3 f v3 Color                              )) ⍝ model position rotationAxis rotationAngle scale tint              ⍝ Draw a model with extended parameters
DrawModelWiresRAYLIB                   ←                     R('DrawModelWiresRetPtr'                   (Model v3 f Color                                    )) ⍝ model position scale tint                                         ⍝ Draw a model wires (with texture if set)
DrawModelWiresExRAYLIB                 ←                     R('DrawModelWiresExRetPtr'                 (Model v3 v3 f v3 Color                              )) ⍝ model position rotationAxis rotationAngle scale tint              ⍝ Draw a model wires (with texture if set) with extended parameters
DrawModelPointsRAYLIB                  ←                     R('DrawModelPointsRetPtr'                  (Model v3 f Color                                    )) ⍝ model position scale tint                                         ⍝ Draw a model as points
DrawModelPointsExRAYLIB                ←                     R('DrawModelPointsExRetPtr'                (Model v3 v3 f v3 Color                              )) ⍝ model position rotationAxis rotationAngle scale tint              ⍝ Draw a model as points with extended parameters
DrawBoundingBoxRAYLIB                  ←                     R('DrawBoundingBoxRetPtr'                  (BoundingBox Color                                   )) ⍝ box color                                                         ⍝ Draw bounding box (wires)
DrawBillboardRAYLIB                    ←                     R('DrawBillboardRetPtr'                    (Camera Texture2D v3 f Color                         )) ⍝ camera texture position scale tint                                ⍝ Draw a billboard texture
DrawBillboardRecRAYLIB                 ←                     R('DrawBillboardRecRetPtr'                 (Camera Texture2D Rectangle v3 v2 Color              )) ⍝ camera texture source position size tint                          ⍝ Draw a billboard texture defined by source
DrawBillboardProRAYLIB                 ←                     R('DrawBillboardProRetPtr'                 (Camera Texture2D Rectangle v3 v3 v2 v2 f Color      )) ⍝ camera texture source position up size origin rotation tint       ⍝ Draw a billboard texture defined by source and rotation
UploadMeshRAYLIB                       ←                     R('UploadMeshRetPtr'                       (('=',Mesh) bool                                     )) ⍝ mesh dynamic                                                      ⍝ Upload mesh vertex data in GPU and provide VAO/VBO ids
UpdateMeshBufferRAYLIB                 ←                     R('UpdateMeshBufferRetPtr'                 (Mesh i ptr i i                                      )) ⍝ mesh index data dataSize offset                                   ⍝ Update mesh vertex data in GPU for a specific buffer index
UnloadMeshRAYLIB                       ←                     R('UnloadMeshRetPtr'                       (,⊂ Mesh                                             )) ⍝ mesh                                                              ⍝ Unload mesh data from CPU and GPU
DrawMeshRAYLIB                         ←                     R('DrawMeshRetPtr'                         (Mesh Material Matrix                                )) ⍝ mesh material transform                                           ⍝ Draw a 3d mesh with material and transform
DrawMeshInstancedRAYLIB                ←                     R('DrawMeshInstancedRetPtr'                (Mesh Material ('<',Matrix) i                        )) ⍝ mesh material transforms instances                                ⍝ Draw multiple mesh instances with material and different transforms
GetMeshBoundingBoxRAYLIB               ←                     R('GetMeshBoundingBoxRetPtr'               (('>',BoundingBox) Mesh                              )) ⍝ mesh                                                              ⍝ Compute mesh bounding box limits
GenMeshTangentsRAYLIB                  ←                     R('GenMeshTangentsRetPtr'                  (,⊂ ('=',Mesh)                                       )) ⍝ mesh                                                              ⍝ Compute mesh tangents
ExportMeshRAYLIB                       ←                     R('ExportMeshRetPtr'                       (('>',bool) Mesh str                                 )) ⍝ mesh fileName                                                     ⍝ Export mesh data to file, returns true on success
ExportMeshAsCodeRAYLIB                 ←                     R('ExportMeshAsCodeRetPtr'                 (('>',bool) Mesh str                                 )) ⍝ mesh fileName                                                     ⍝ Export mesh as code file (.h) defining multiple arrays of vertex attributes
GenMeshPolyRAYLIB                      ←                     R('GenMeshPolyRetPtr'                      (('>',Mesh) i f                                      )) ⍝ sides radius                                                      ⍝ Generate polygonal mesh
GenMeshPlaneRAYLIB                     ←                     R('GenMeshPlaneRetPtr'                     (('>',Mesh) f f i i                                  )) ⍝ width length resX resZ                                            ⍝ Generate plane mesh (with subdivisions)
GenMeshCubeRAYLIB                      ←                     R('GenMeshCubeRetPtr'                      (('>',Mesh) f f f                                    )) ⍝ width height length                                               ⍝ Generate cuboid mesh
GenMeshSphereRAYLIB                    ←                     R('GenMeshSphereRetPtr'                    (('>',Mesh) f i i                                    )) ⍝ radius rings slices                                               ⍝ Generate sphere mesh (standard sphere)
GenMeshHemiSphereRAYLIB                ←                     R('GenMeshHemiSphereRetPtr'                (('>',Mesh) f i i                                    )) ⍝ radius rings slices                                               ⍝ Generate half-sphere mesh (no bottom cap)
GenMeshCylinderRAYLIB                  ←                     R('GenMeshCylinderRetPtr'                  (('>',Mesh) f f i                                    )) ⍝ radius height slices                                              ⍝ Generate cylinder mesh
GenMeshConeRAYLIB                      ←                     R('GenMeshConeRetPtr'                      (('>',Mesh) f f i                                    )) ⍝ radius height slices                                              ⍝ Generate cone/pyramid mesh
GenMeshTorusRAYLIB                     ←                     R('GenMeshTorusRetPtr'                     (('>',Mesh) f f i i                                  )) ⍝ radius size radSeg sides                                          ⍝ Generate torus mesh
GenMeshKnotRAYLIB                      ←                     R('GenMeshKnotRetPtr'                      (('>',Mesh) f f i i                                  )) ⍝ radius size radSeg sides                                          ⍝ Generate trefoil knot mesh
GenMeshHeightmapRAYLIB                 ←                     R('GenMeshHeightmapRetPtr'                 (('>',Mesh) Image v3                                 )) ⍝ heightmap size                                                    ⍝ Generate heightmap mesh from image data
GenMeshCubicmapRAYLIB                  ←                     R('GenMeshCubicmapRetPtr'                  (('>',Mesh) Image v3                                 )) ⍝ cubicmap cubeSize                                                 ⍝ Generate cubes-based map mesh from image data
LoadMaterialsRAYLIB                    ←                     R('LoadMaterialsRetPtr'                    (ptr str ('=',i)                                     )) ⍝ fileName materialCount                                            ⍝ Load materials from model file
LoadMaterialDefaultRAYLIB              ←                     R('LoadMaterialDefaultRetPtr'              (,⊂ ('>',Material)                                   )) ⍝                                                                   ⍝ Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)
IsMaterialValidRAYLIB                  ←                     R('IsMaterialValidRetPtr'                  (('>',bool) Material                                 )) ⍝ material                                                          ⍝ Check if a material is valid (shader assigned, map textures loaded in GPU)
UnloadMaterialRAYLIB                   ←                     R('UnloadMaterialRetPtr'                   (,⊂ Material                                         )) ⍝ material                                                          ⍝ Unload material from GPU memory (VRAM)
SetMaterialTextureRAYLIB               ←                     R('SetMaterialTextureRetPtr'               (('=',Material) i Texture2D                          )) ⍝ material mapType texture                                          ⍝ Set texture for a material map type (MATERIAL_MAP_DIFFUSE, MATERIAL_MAP_SPECULAR...)
SetModelMeshMaterialRAYLIB             ←                     R('SetModelMeshMaterialRetPtr'             (('=',Model) i i                                     )) ⍝ model meshId materialId                                           ⍝ Set material for a mesh
LoadModelAnimationsRAYLIB              ←                     R('LoadModelAnimationsRetPtr'              (ptr str ('=',i)                                     )) ⍝ fileName animCount                                                ⍝ Load model animations from file
UpdateModelAnimationRAYLIB             ←                     R('UpdateModelAnimationRetPtr'             (Model ModelAnimation i                              )) ⍝ model anim frame                                                  ⍝ Update model animation pose (CPU)
UpdateModelAnimationBonesRAYLIB        ←                     R('UpdateModelAnimationBonesRetPtr'        (Model ModelAnimation i                              )) ⍝ model anim frame                                                  ⍝ Update model animation mesh bone matrices (GPU skinning)
UnloadModelAnimationRAYLIB             ←                     R('UnloadModelAnimationRetPtr'             (,⊂ ModelAnimation                                   )) ⍝ anim                                                              ⍝ Unload animation data
UnloadModelAnimationsRAYLIB            ←                     R('UnloadModelAnimationsRetPtr'            (('=',ModelAnimation) i                              )) ⍝ animations animCount                                              ⍝ Unload animation array data
IsModelAnimationValidRAYLIB            ←                     R('IsModelAnimationValidRetPtr'            (('>',bool) Model ModelAnimation                     )) ⍝ model anim                                                        ⍝ Check model animation skeleton match
CheckCollisionSpheresRAYLIB            ←                     R('CheckCollisionSpheresRetPtr'            (('>',bool) v3 f v3 f                                )) ⍝ center1 radius1 center2 radius2                                   ⍝ Check collision between two spheres
CheckCollisionBoxesRAYLIB              ←                     R('CheckCollisionBoxesRetPtr'              (('>',bool) BoundingBox BoundingBox                  )) ⍝ box1 box2                                                         ⍝ Check collision between two bounding boxes
CheckCollisionBoxSphereRAYLIB          ←                     R('CheckCollisionBoxSphereRetPtr'          (('>',bool) BoundingBox v3 f                         )) ⍝ box center radius                                                 ⍝ Check collision between box and sphere
GetRayCollisionSphereRAYLIB            ←                     R('GetRayCollisionSphereRetPtr'            (('>',RayCollision) Ray v3 f                         )) ⍝ ray center radius                                                 ⍝ Get collision info between ray and sphere
GetRayCollisionBoxRAYLIB               ←                     R('GetRayCollisionBoxRetPtr'               (('>',RayCollision) Ray BoundingBox                  )) ⍝ ray box                                                           ⍝ Get collision info between ray and box
GetRayCollisionMeshRAYLIB              ←                     R('GetRayCollisionMeshRetPtr'              (('>',RayCollision) Ray Mesh Matrix                  )) ⍝ ray mesh transform                                                ⍝ Get collision info between ray and mesh
GetRayCollisionTriangleRAYLIB          ←                     R('GetRayCollisionTriangleRetPtr'          (('>',RayCollision) Ray v3 v3 v3                     )) ⍝ ray p1 p2 p3                                                      ⍝ Get collision info between ray and triangle
GetRayCollisionQuadRAYLIB              ←                     R('GetRayCollisionQuadRetPtr'              (('>',RayCollision) Ray v3 v3 v3 v3                  )) ⍝ ray p1 p2 p3 p4                                                   ⍝ Get collision info between ray and quad
InitAudioDeviceRAYLIB                  ←                     R('InitAudioDeviceRetPtr'                  (⍬                                                   )) ⍝                                                                   ⍝ Initialize audio device and context
CloseAudioDeviceRAYLIB                 ←                     R('CloseAudioDeviceRetPtr'                 (⍬                                                   )) ⍝                                                                   ⍝ Close the audio device and context
IsAudioDeviceReadyRAYLIB               ←                     R('IsAudioDeviceReadyRetPtr'               (,⊂ ('>',bool)                                       )) ⍝                                                                   ⍝ Check if audio device has been initialized successfully
SetMasterVolumeRAYLIB                  ←                     R('SetMasterVolumeRetPtr'                  (,⊂ f                                                )) ⍝ volume                                                            ⍝ Set master volume (listener)
GetMasterVolumeRAYLIB                  ←                     R('GetMasterVolumeRetPtr'                  (,⊂ ('>',f)                                          )) ⍝                                                                   ⍝ Get master volume (listener)
LoadWaveRAYLIB                         ←                     R('LoadWaveRetPtr'                         (('>',Wave) str                                      )) ⍝ fileName                                                          ⍝ Load wave data from file
LoadWaveFromMemoryRAYLIB               ←                     R('LoadWaveFromMemoryRetPtr'               (('>',Wave) str ustr i                               )) ⍝ fileType fileData dataSize                                        ⍝ Load wave from memory buffer, fileType refers to extension: i.e. '.wav'
IsWaveValidRAYLIB                      ←                     R('IsWaveValidRetPtr'                      (('>',bool) Wave                                     )) ⍝ wave                                                              ⍝ Checks if wave data is valid (data loaded and parameters)
LoadSoundRAYLIB                        ←                     R('LoadSoundRetPtr'                        (('>',Sound) str                                     )) ⍝ fileName                                                          ⍝ Load sound from file
LoadSoundFromWaveRAYLIB                ←                     R('LoadSoundFromWaveRetPtr'                (('>',Sound) Wave                                    )) ⍝ wave                                                              ⍝ Load sound from wave data
LoadSoundAliasRAYLIB                   ←                     R('LoadSoundAliasRetPtr'                   (('>',Sound) Sound                                   )) ⍝ source                                                            ⍝ Create a new sound that shares the same sample data as the source sound, does not own the sound data
IsSoundValidRAYLIB                     ←                     R('IsSoundValidRetPtr'                     (('>',bool) Sound                                    )) ⍝ sound                                                             ⍝ Checks if a sound is valid (data loaded and buffers initialized)
UpdateSoundRAYLIB                      ←                     R('UpdateSoundRetPtr'                      (Sound ptr i                                         )) ⍝ sound data sampleCount                                            ⍝ Update sound buffer with new data
UnloadWaveRAYLIB                       ←                     R('UnloadWaveRetPtr'                       (,⊂ Wave                                             )) ⍝ wave                                                              ⍝ Unload wave data
UnloadSoundRAYLIB                      ←                     R('UnloadSoundRetPtr'                      (,⊂ Sound                                            )) ⍝ sound                                                             ⍝ Unload sound
UnloadSoundAliasRAYLIB                 ←                     R('UnloadSoundAliasRetPtr'                 (,⊂ Sound                                            )) ⍝ alias                                                             ⍝ Unload a sound alias (does not deallocate sample data)
ExportWaveRAYLIB                       ←                     R('ExportWaveRetPtr'                       (('>',bool) Wave str                                 )) ⍝ wave fileName                                                     ⍝ Export wave data to file, returns true on success
ExportWaveAsCodeRAYLIB                 ←                     R('ExportWaveAsCodeRetPtr'                 (('>',bool) Wave str                                 )) ⍝ wave fileName                                                     ⍝ Export wave sample data to code (.h), returns true on success
PlaySoundRAYLIB                        ←                     R('PlaySoundRetPtr'                        (,⊂ Sound                                            )) ⍝ sound                                                             ⍝ Play a sound
StopSoundRAYLIB                        ←                     R('StopSoundRetPtr'                        (,⊂ Sound                                            )) ⍝ sound                                                             ⍝ Stop playing a sound
PauseSoundRAYLIB                       ←                     R('PauseSoundRetPtr'                       (,⊂ Sound                                            )) ⍝ sound                                                             ⍝ Pause a sound
ResumeSoundRAYLIB                      ←                     R('ResumeSoundRetPtr'                      (,⊂ Sound                                            )) ⍝ sound                                                             ⍝ Resume a paused sound
IsSoundPlayingRAYLIB                   ←                     R('IsSoundPlayingRetPtr'                   (('>',bool) Sound                                    )) ⍝ sound                                                             ⍝ Check if a sound is currently playing
SetSoundVolumeRAYLIB                   ←                     R('SetSoundVolumeRetPtr'                   (Sound f                                             )) ⍝ sound volume                                                      ⍝ Set volume for a sound (1.0 is max level)
SetSoundPitchRAYLIB                    ←                     R('SetSoundPitchRetPtr'                    (Sound f                                             )) ⍝ sound pitch                                                       ⍝ Set pitch for a sound (1.0 is base level)
SetSoundPanRAYLIB                      ←                     R('SetSoundPanRetPtr'                      (Sound f                                             )) ⍝ sound pan                                                         ⍝ Set pan for a sound (0.5 is center)
WaveCopyRAYLIB                         ←                     R('WaveCopyRetPtr'                         (('>',Wave) Wave                                     )) ⍝ wave                                                              ⍝ Copy a wave to a new wave
WaveCropRAYLIB                         ←                     R('WaveCropRetPtr'                         (('=',Wave) i i                                      )) ⍝ wave initFrame finalFrame                                         ⍝ Crop a wave to defined frames range
WaveFormatRAYLIB                       ←                     R('WaveFormatRetPtr'                       (('=',Wave) i i i                                    )) ⍝ wave sampleRate sampleSize channels                               ⍝ Convert wave data to desired format
LoadWaveSamplesRAYLIB                  ←                     R('LoadWaveSamplesRetPtr'                  (ptr Wave                                            )) ⍝ wave                                                              ⍝ Load samples data from wave as a 32bit float data array
UnloadWaveSamplesRAYLIB                ←                     R('UnloadWaveSamplesRetPtr'                (,⊂ ('=',f)                                          )) ⍝ samples                                                           ⍝ Unload samples data loaded with LoadWaveSamples()
LoadMusicStreamRAYLIB                  ←                     R('LoadMusicStreamRetPtr'                  (('>',Music) str                                     )) ⍝ fileName                                                          ⍝ Load music stream from file
LoadMusicStreamFromMemoryRAYLIB        ←                     R('LoadMusicStreamFromMemoryRetPtr'        (('>',Music) str ustr i                              )) ⍝ fileType data dataSize                                            ⍝ Load music stream from data
IsMusicValidRAYLIB                     ←                     R('IsMusicValidRetPtr'                     (('>',bool) Music                                    )) ⍝ music                                                             ⍝ Checks if a music stream is valid (context and buffers initialized)
UnloadMusicStreamRAYLIB                ←                     R('UnloadMusicStreamRetPtr'                (,⊂ Music                                            )) ⍝ music                                                             ⍝ Unload music stream
PlayMusicStreamRAYLIB                  ←                     R('PlayMusicStreamRetPtr'                  (,⊂ Music                                            )) ⍝ music                                                             ⍝ Start music playing
IsMusicStreamPlayingRAYLIB             ←                     R('IsMusicStreamPlayingRetPtr'             (('>',bool) Music                                    )) ⍝ music                                                             ⍝ Check if music is playing
UpdateMusicStreamRAYLIB                ←                     R('UpdateMusicStreamRetPtr'                (,⊂ Music                                            )) ⍝ music                                                             ⍝ Updates buffers for music streaming
StopMusicStreamRAYLIB                  ←                     R('StopMusicStreamRetPtr'                  (,⊂ Music                                            )) ⍝ music                                                             ⍝ Stop music playing
PauseMusicStreamRAYLIB                 ←                     R('PauseMusicStreamRetPtr'                 (,⊂ Music                                            )) ⍝ music                                                             ⍝ Pause music playing
ResumeMusicStreamRAYLIB                ←                     R('ResumeMusicStreamRetPtr'                (,⊂ Music                                            )) ⍝ music                                                             ⍝ Resume playing paused music
SeekMusicStreamRAYLIB                  ←                     R('SeekMusicStreamRetPtr'                  (Music f                                             )) ⍝ music position                                                    ⍝ Seek music to a position (in seconds)
SetMusicVolumeRAYLIB                   ←                     R('SetMusicVolumeRetPtr'                   (Music f                                             )) ⍝ music volume                                                      ⍝ Set volume for music (1.0 is max level)
SetMusicPitchRAYLIB                    ←                     R('SetMusicPitchRetPtr'                    (Music f                                             )) ⍝ music pitch                                                       ⍝ Set pitch for a music (1.0 is base level)
SetMusicPanRAYLIB                      ←                     R('SetMusicPanRetPtr'                      (Music f                                             )) ⍝ music pan                                                         ⍝ Set pan for a music (0.5 is center)
GetMusicTimeLengthRAYLIB               ←                     R('GetMusicTimeLengthRetPtr'               (('>',f) Music                                       )) ⍝ music                                                             ⍝ Get music time length (in seconds)
GetMusicTimePlayedRAYLIB               ←                     R('GetMusicTimePlayedRetPtr'               (('>',f) Music                                       )) ⍝ music                                                             ⍝ Get current music time played (in seconds)
LoadAudioStreamRAYLIB                  ←                     R('LoadAudioStreamRetPtr'                  (('>',AudioStream) u u u                             )) ⍝ sampleRate sampleSize channels                                    ⍝ Load audio stream (to stream raw audio pcm data)
IsAudioStreamValidRAYLIB               ←                     R('IsAudioStreamValidRetPtr'               (('>',bool) AudioStream                              )) ⍝ stream                                                            ⍝ Checks if an audio stream is valid (buffers initialized)
UnloadAudioStreamRAYLIB                ←                     R('UnloadAudioStreamRetPtr'                (,⊂ AudioStream                                      )) ⍝ stream                                                            ⍝ Unload audio stream and free memory
UpdateAudioStreamRAYLIB                ←                     R('UpdateAudioStreamRetPtr'                (AudioStream ptr i                                   )) ⍝ stream data frameCount                                            ⍝ Update audio stream buffers with data
IsAudioStreamProcessedRAYLIB           ←                     R('IsAudioStreamProcessedRetPtr'           (('>',bool) AudioStream                              )) ⍝ stream                                                            ⍝ Check if any audio stream buffers requires refill
PlayAudioStreamRAYLIB                  ←                     R('PlayAudioStreamRetPtr'                  (,⊂ AudioStream                                      )) ⍝ stream                                                            ⍝ Play audio stream
PauseAudioStreamRAYLIB                 ←                     R('PauseAudioStreamRetPtr'                 (,⊂ AudioStream                                      )) ⍝ stream                                                            ⍝ Pause audio stream
ResumeAudioStreamRAYLIB                ←                     R('ResumeAudioStreamRetPtr'                (,⊂ AudioStream                                      )) ⍝ stream                                                            ⍝ Resume audio stream
IsAudioStreamPlayingRAYLIB             ←                     R('IsAudioStreamPlayingRetPtr'             (('>',bool) AudioStream                              )) ⍝ stream                                                            ⍝ Check if audio stream is playing
StopAudioStreamRAYLIB                  ←                     R('StopAudioStreamRetPtr'                  (,⊂ AudioStream                                      )) ⍝ stream                                                            ⍝ Stop audio stream
SetAudioStreamVolumeRAYLIB             ←                     R('SetAudioStreamVolumeRetPtr'             (AudioStream f                                       )) ⍝ stream volume                                                     ⍝ Set volume for audio stream (1.0 is max level)
SetAudioStreamPitchRAYLIB              ←                     R('SetAudioStreamPitchRetPtr'              (AudioStream f                                       )) ⍝ stream pitch                                                      ⍝ Set pitch for audio stream (1.0 is base level)
SetAudioStreamPanRAYLIB                ←                     R('SetAudioStreamPanRetPtr'                (AudioStream f                                       )) ⍝ stream pan                                                        ⍝ Set pan for audio stream (0.5 is centered)
SetAudioStreamBufferSizeDefaultRAYLIB  ←                     R('SetAudioStreamBufferSizeDefaultRetPtr'  (,⊂ i                                                )) ⍝ size                                                              ⍝ Default size for new audio streams
SetAudioStreamCallbackRAYLIB           ←                     R('SetAudioStreamCallbackRetPtr'           (AudioStream ptr                                     )) ⍝ stream callback                                                   ⍝ Audio thread callback to request new data
AttachAudioStreamProcessorRAYLIB       ←                     R('AttachAudioStreamProcessorRetPtr'       (AudioStream ptr                                     )) ⍝ stream processor                                                  ⍝ Attach audio stream processor to stream, receives the samples as 'float'
DetachAudioStreamProcessorRAYLIB       ←                     R('DetachAudioStreamProcessorRetPtr'       (AudioStream ptr                                     )) ⍝ stream processor                                                  ⍝ Detach audio stream processor from stream
AttachAudioMixedProcessorRAYLIB        ←                     R('AttachAudioMixedProcessorRetPtr'        (,⊂ ptr                                              )) ⍝ processor                                                         ⍝ Attach audio stream processor to the entire audio pipeline, receives the samples as 'float'
DetachAudioMixedProcessorRAYLIB        ←                     R('DetachAudioMixedProcessorRetPtr'        (,⊂ ptr                                              )) ⍝ processor                                                         ⍝ Detach audio stream processor from the entire audio pipeline
AfterDefaultDefinitions mode 'raylibReplacement.apln.hide'
∇
:EndNamespace
