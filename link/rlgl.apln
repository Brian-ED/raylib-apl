:Namespace rlgl
⍝ THIS TEXT HAS BEEN AUTOGENERATED

RLGL_VERSION                                  ← '5.0' ⍝
RL_DEFAULT_BATCH_BUFFER_ELEMENTS              ← 8192  ⍝
RL_DEFAULT_BATCH_BUFFERS                      ← 1     ⍝ Default number of batch buffers (multi-buffering)
RL_DEFAULT_BATCH_DRAWCALLS                    ← 256   ⍝ Default number of batch draw calls (by state changes: mode, texture)
RL_DEFAULT_BATCH_MAX_TEXTURE_UNITS            ← 4     ⍝ Maximum number of textures units that can be activated on batch drawing (SetShaderValueTexture())
RL_MAX_MATRIX_STACK_SIZE                      ← 32    ⍝ Maximum size of Matrix stack
RL_MAX_SHADER_LOCATIONS                       ← 32    ⍝ Maximum number of shader locations supported
RL_CULL_DISTANCE_NEAR                         ← 0.01  ⍝ Default near cull distance
RL_CULL_DISTANCE_FAR                          ← 1000  ⍝ Default far cull distance
RL_TEXTURE_WRAP_S                             ← 10242 ⍝ GL_TEXTURE_WRAP_S
RL_TEXTURE_WRAP_T                             ← 10243 ⍝ GL_TEXTURE_WRAP_T
RL_TEXTURE_MAG_FILTER                         ← 10240 ⍝ GL_TEXTURE_MAG_FILTER
RL_TEXTURE_MIN_FILTER                         ← 10241 ⍝ GL_TEXTURE_MIN_FILTER
RL_TEXTURE_FILTER_NEAREST                     ← 9728  ⍝ GL_NEAREST
RL_TEXTURE_FILTER_LINEAR                      ← 9729  ⍝ GL_LINEAR
RL_TEXTURE_FILTER_MIP_NEAREST                 ← 9984  ⍝ GL_NEAREST_MIPMAP_NEAREST
RL_TEXTURE_FILTER_NEAREST_MIP_LINEAR          ← 9986  ⍝ GL_NEAREST_MIPMAP_LINEAR
RL_TEXTURE_FILTER_LINEAR_MIP_NEAREST          ← 9985  ⍝ GL_LINEAR_MIPMAP_NEAREST
RL_TEXTURE_FILTER_MIP_LINEAR                  ← 9987  ⍝ GL_LINEAR_MIPMAP_LINEAR
RL_TEXTURE_FILTER_ANISOTROPIC                 ← 12288 ⍝ Anisotropic filter (custom identifier)
RL_TEXTURE_MIPMAP_BIAS_RATIO                  ← 16384 ⍝ Texture mipmap bias, percentage ratio (custom identifier)
RL_TEXTURE_WRAP_REPEAT                        ← 10497 ⍝ GL_REPEAT
RL_TEXTURE_WRAP_CLAMP                         ← 33071 ⍝ GL_CLAMP_TO_EDGE
RL_TEXTURE_WRAP_MIRROR_REPEAT                 ← 33648 ⍝ GL_MIRRORED_REPEAT
RL_TEXTURE_WRAP_MIRROR_CLAMP                  ← 34626 ⍝ GL_MIRROR_CLAMP_EXT
RL_MODELVIEW                                  ← 5888  ⍝ GL_MODELVIEW
RL_PROJECTION                                 ← 5889  ⍝ GL_PROJECTION
RL_TEXTURE                                    ← 5890  ⍝ GL_TEXTURE
RL_LINES                                      ← 1     ⍝ GL_LINES
RL_TRIANGLES                                  ← 4     ⍝ GL_TRIANGLES
RL_QUADS                                      ← 7     ⍝ GL_QUADS
RL_UNSIGNED_BYTE                              ← 5121  ⍝ GL_UNSIGNED_BYTE
RL_FLOAT                                      ← 5126  ⍝ GL_FLOAT
RL_STREAM_DRAW                                ← 35040 ⍝ GL_STREAM_DRAW
RL_STREAM_READ                                ← 35041 ⍝ GL_STREAM_READ
RL_STREAM_COPY                                ← 35042 ⍝ GL_STREAM_COPY
RL_STATIC_DRAW                                ← 35044 ⍝ GL_STATIC_DRAW
RL_STATIC_READ                                ← 35045 ⍝ GL_STATIC_READ
RL_STATIC_COPY                                ← 35046 ⍝ GL_STATIC_COPY
RL_DYNAMIC_DRAW                               ← 35048 ⍝ GL_DYNAMIC_DRAW
RL_DYNAMIC_READ                               ← 35049 ⍝ GL_DYNAMIC_READ
RL_DYNAMIC_COPY                               ← 35050 ⍝ GL_DYNAMIC_COPY
RL_FRAGMENT_SHADER                            ← 35632 ⍝ GL_FRAGMENT_SHADER
RL_VERTEX_SHADER                              ← 35633 ⍝ GL_VERTEX_SHADER
RL_COMPUTE_SHADER                             ← 37305 ⍝ GL_COMPUTE_SHADER
RL_ZERO                                       ← 0     ⍝ GL_ZERO
RL_ONE                                        ← 1     ⍝ GL_ONE
RL_SRC_COLOR                                  ← 768   ⍝ GL_SRC_COLOR
RL_ONE_MINUS_SRC_COLOR                        ← 769   ⍝ GL_ONE_MINUS_SRC_COLOR
RL_SRC_ALPHA                                  ← 770   ⍝ GL_SRC_ALPHA
RL_ONE_MINUS_SRC_ALPHA                        ← 771   ⍝ GL_ONE_MINUS_SRC_ALPHA
RL_DST_ALPHA                                  ← 772   ⍝ GL_DST_ALPHA
RL_ONE_MINUS_DST_ALPHA                        ← 773   ⍝ GL_ONE_MINUS_DST_ALPHA
RL_DST_COLOR                                  ← 774   ⍝ GL_DST_COLOR
RL_ONE_MINUS_DST_COLOR                        ← 775   ⍝ GL_ONE_MINUS_DST_COLOR
RL_SRC_ALPHA_SATURATE                         ← 776   ⍝ GL_SRC_ALPHA_SATURATE
RL_CONSTANT_COLOR                             ← 32769 ⍝ GL_CONSTANT_COLOR
RL_ONE_MINUS_CONSTANT_COLOR                   ← 32770 ⍝ GL_ONE_MINUS_CONSTANT_COLOR
RL_CONSTANT_ALPHA                             ← 32771 ⍝ GL_CONSTANT_ALPHA
RL_ONE_MINUS_CONSTANT_ALPHA                   ← 32772 ⍝ GL_ONE_MINUS_CONSTANT_ALPHA
RL_FUNC_ADD                                   ← 32774 ⍝ GL_FUNC_ADD
RL_MIN                                        ← 32775 ⍝ GL_MIN
RL_MAX                                        ← 32776 ⍝ GL_MAX
RL_FUNC_SUBTRACT                              ← 32778 ⍝ GL_FUNC_SUBTRACT
RL_FUNC_REVERSE_SUBTRACT                      ← 32779 ⍝ GL_FUNC_REVERSE_SUBTRACT
RL_BLEND_EQUATION                             ← 32777 ⍝ GL_BLEND_EQUATION
RL_BLEND_EQUATION_RGB                         ← 32777 ⍝ GL_BLEND_EQUATION_RGB   // (Same as BLEND_EQUATION)
RL_BLEND_EQUATION_ALPHA                       ← 34877 ⍝ GL_BLEND_EQUATION_ALPHA
RL_BLEND_DST_RGB                              ← 32968 ⍝ GL_BLEND_DST_RGB
RL_BLEND_SRC_RGB                              ← 32969 ⍝ GL_BLEND_SRC_RGB
RL_BLEND_DST_ALPHA                            ← 32970 ⍝ GL_BLEND_DST_ALPHA
RL_BLEND_SRC_ALPHA                            ← 32971 ⍝ GL_BLEND_SRC_ALPHA
RL_BLEND_COLOR                                ← 32773 ⍝ GL_BLEND_COLOR
RL_READ_FRAMEBUFFER                           ← 36008 ⍝ GL_READ_FRAMEBUFFER
RL_DRAW_FRAMEBUFFER                           ← 36009 ⍝ GL_DRAW_FRAMEBUFFER
RL_DEFAULT_SHADER_ATTRIB_LOCATION_POSITION    ← 0     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD    ← 1     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_NORMAL      ← 2     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_COLOR       ← 3     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TANGENT     ← 4     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_TEXCOORD2   ← 5     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_INDICES     ← 6     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEIDS     ← 7     ⍝
RL_DEFAULT_SHADER_ATTRIB_LOCATION_BONEWEIGHTS ← 8     ⍝

:Namespace rlGlVersion ⍝ OpenGL version
  RL_OPENGL_11    ← 1  ⍝ OpenGL 1.1
  RL_OPENGL_21    ← 2  ⍝ OpenGL 2.1 (GLSL 120)
  RL_OPENGL_33    ← 3  ⍝ OpenGL 3.3 (GLSL 330)
  RL_OPENGL_43    ← 4  ⍝ OpenGL 4.3 (using GLSL 330)
  RL_OPENGL_ES_20 ← 5  ⍝ OpenGL ES 2.0 (GLSL 100)
  RL_OPENGL_ES_30 ← 6  ⍝ OpenGL ES 3.0 (GLSL 300 es)
:EndNamespace

:Namespace rlTraceLogLevel ⍝ Trace log level
  RL_LOG_ALL     ← 0  ⍝ Display all logs
  RL_LOG_TRACE   ← 1  ⍝ Trace logging, intended for internal use only
  RL_LOG_DEBUG   ← 2  ⍝ Debug logging, used for internal debugging, it should be disabled on release builds
  RL_LOG_INFO    ← 3  ⍝ Info logging, used for program execution info
  RL_LOG_WARNING ← 4  ⍝ Warning logging, used on recoverable failures
  RL_LOG_ERROR   ← 5  ⍝ Error logging, used on unrecoverable failures
  RL_LOG_FATAL   ← 6  ⍝ Fatal logging, used to abort program: exit(EXIT_FAILURE)
  RL_LOG_NONE    ← 7  ⍝ Disable logging
:EndNamespace

:Namespace rlPixelFormat ⍝ Texture pixel formats
  RL_PIXELFORMAT_UNCOMPRESSED_GRAYSCALE    ← 1   ⍝ 8 bit per pixel (no alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA   ← 2   ⍝ 8*2 bpp (2 channels)
  RL_PIXELFORMAT_UNCOMPRESSED_R5G6B5       ← 3   ⍝ 16 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8       ← 4   ⍝ 24 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R5G5B5A1     ← 5   ⍝ 16 bpp (1 bit alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_R4G4B4A4     ← 6   ⍝ 16 bpp (4 bit alpha)
  RL_PIXELFORMAT_UNCOMPRESSED_R8G8B8A8     ← 7   ⍝ 32 bpp
  RL_PIXELFORMAT_UNCOMPRESSED_R32          ← 8   ⍝ 32 bpp (1 channel - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32    ← 9   ⍝ 32*3 bpp (3 channels - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R32G32B32A32 ← 10  ⍝ 32*4 bpp (4 channels - float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16          ← 11  ⍝ 16 bpp (1 channel - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16    ← 12  ⍝ 16*3 bpp (3 channels - half float)
  RL_PIXELFORMAT_UNCOMPRESSED_R16G16B16A16 ← 13  ⍝ 16*4 bpp (4 channels - half float)
  RL_PIXELFORMAT_COMPRESSED_DXT1_RGB       ← 14  ⍝ 4 bpp (no alpha)
  RL_PIXELFORMAT_COMPRESSED_DXT1_RGBA      ← 15  ⍝ 4 bpp (1 bit alpha)
  RL_PIXELFORMAT_COMPRESSED_DXT3_RGBA      ← 16  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_DXT5_RGBA      ← 17  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC1_RGB       ← 18  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC2_RGB       ← 19  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA  ← 20  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_PVRT_RGB       ← 21  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_PVRT_RGBA      ← 22  ⍝ 4 bpp
  RL_PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA  ← 23  ⍝ 8 bpp
  RL_PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA  ← 24  ⍝ 2 bpp
:EndNamespace

:Namespace rlTextureFilter ⍝ Texture parameters: filter mode
  RL_TEXTURE_FILTER_POINT           ← 0  ⍝ No filter, just pixel approximation
  RL_TEXTURE_FILTER_BILINEAR        ← 1  ⍝ Linear filtering
  RL_TEXTURE_FILTER_TRILINEAR       ← 2  ⍝ Trilinear filtering (linear with mipmaps)
  RL_TEXTURE_FILTER_ANISOTROPIC_4X  ← 3  ⍝ Anisotropic filtering 4x
  RL_TEXTURE_FILTER_ANISOTROPIC_8X  ← 4  ⍝ Anisotropic filtering 8x
  RL_TEXTURE_FILTER_ANISOTROPIC_16X ← 5  ⍝ Anisotropic filtering 16x
:EndNamespace

:Namespace rlBlendMode ⍝ Color blending modes (pre-defined)
  RL_BLEND_ALPHA             ← 0  ⍝ Blend textures considering alpha (default)
  RL_BLEND_ADDITIVE          ← 1  ⍝ Blend textures adding colors
  RL_BLEND_MULTIPLIED        ← 2  ⍝ Blend textures multiplying colors
  RL_BLEND_ADD_COLORS        ← 3  ⍝ Blend textures adding colors (alternative)
  RL_BLEND_SUBTRACT_COLORS   ← 4  ⍝ Blend textures subtracting colors (alternative)
  RL_BLEND_ALPHA_PREMULTIPLY ← 5  ⍝ Blend premultiplied textures considering alpha
  RL_BLEND_CUSTOM            ← 6  ⍝ Blend textures using custom src/dst factors (use rlSetBlendFactors())
  RL_BLEND_CUSTOM_SEPARATE   ← 7  ⍝ Blend textures using custom src/dst factors (use rlSetBlendFactorsSeparate())
:EndNamespace

:Namespace rlShaderLocationIndex ⍝ Shader location point type
  RL_SHADER_LOC_VERTEX_POSITION   ← 0   ⍝ Shader location: vertex attribute: position
  RL_SHADER_LOC_VERTEX_TEXCOORD01 ← 1   ⍝ Shader location: vertex attribute: texcoord01
  RL_SHADER_LOC_VERTEX_TEXCOORD02 ← 2   ⍝ Shader location: vertex attribute: texcoord02
  RL_SHADER_LOC_VERTEX_NORMAL     ← 3   ⍝ Shader location: vertex attribute: normal
  RL_SHADER_LOC_VERTEX_TANGENT    ← 4   ⍝ Shader location: vertex attribute: tangent
  RL_SHADER_LOC_VERTEX_COLOR      ← 5   ⍝ Shader location: vertex attribute: color
  RL_SHADER_LOC_MATRIX_MVP        ← 6   ⍝ Shader location: matrix uniform: model-view-projection
  RL_SHADER_LOC_MATRIX_VIEW       ← 7   ⍝ Shader location: matrix uniform: view (camera transform)
  RL_SHADER_LOC_MATRIX_PROJECTION ← 8   ⍝ Shader location: matrix uniform: projection
  RL_SHADER_LOC_MATRIX_MODEL      ← 9   ⍝ Shader location: matrix uniform: model (transform)
  RL_SHADER_LOC_MATRIX_NORMAL     ← 10  ⍝ Shader location: matrix uniform: normal
  RL_SHADER_LOC_VECTOR_VIEW       ← 11  ⍝ Shader location: vector uniform: view
  RL_SHADER_LOC_COLOR_DIFFUSE     ← 12  ⍝ Shader location: vector uniform: diffuse color
  RL_SHADER_LOC_COLOR_SPECULAR    ← 13  ⍝ Shader location: vector uniform: specular color
  RL_SHADER_LOC_COLOR_AMBIENT     ← 14  ⍝ Shader location: vector uniform: ambient color
  RL_SHADER_LOC_MAP_ALBEDO        ← 15  ⍝ Shader location: sampler2d texture: albedo (same as: RL_SHADER_LOC_MAP_DIFFUSE)
  RL_SHADER_LOC_MAP_METALNESS     ← 16  ⍝ Shader location: sampler2d texture: metalness (same as: RL_SHADER_LOC_MAP_SPECULAR)
  RL_SHADER_LOC_MAP_NORMAL        ← 17  ⍝ Shader location: sampler2d texture: normal
  RL_SHADER_LOC_MAP_ROUGHNESS     ← 18  ⍝ Shader location: sampler2d texture: roughness
  RL_SHADER_LOC_MAP_OCCLUSION     ← 19  ⍝ Shader location: sampler2d texture: occlusion
  RL_SHADER_LOC_MAP_EMISSION      ← 20  ⍝ Shader location: sampler2d texture: emission
  RL_SHADER_LOC_MAP_HEIGHT        ← 21  ⍝ Shader location: sampler2d texture: height
  RL_SHADER_LOC_MAP_CUBEMAP       ← 22  ⍝ Shader location: samplerCube texture: cubemap
  RL_SHADER_LOC_MAP_IRRADIANCE    ← 23  ⍝ Shader location: samplerCube texture: irradiance
  RL_SHADER_LOC_MAP_PREFILTER     ← 24  ⍝ Shader location: samplerCube texture: prefilter
  RL_SHADER_LOC_MAP_BRDF          ← 25  ⍝ Shader location: sampler2d texture: brdf
:EndNamespace

:Namespace rlShaderUniformDataType ⍝ Shader uniform data type
  RL_SHADER_UNIFORM_FLOAT     ← 0   ⍝ Shader uniform type: float
  RL_SHADER_UNIFORM_VEC2      ← 1   ⍝ Shader uniform type: vec2 (2 float)
  RL_SHADER_UNIFORM_VEC3      ← 2   ⍝ Shader uniform type: vec3 (3 float)
  RL_SHADER_UNIFORM_VEC4      ← 3   ⍝ Shader uniform type: vec4 (4 float)
  RL_SHADER_UNIFORM_INT       ← 4   ⍝ Shader uniform type: int
  RL_SHADER_UNIFORM_IVEC2     ← 5   ⍝ Shader uniform type: ivec2 (2 int)
  RL_SHADER_UNIFORM_IVEC3     ← 6   ⍝ Shader uniform type: ivec3 (3 int)
  RL_SHADER_UNIFORM_IVEC4     ← 7   ⍝ Shader uniform type: ivec4 (4 int)
  RL_SHADER_UNIFORM_UINT      ← 8   ⍝ Shader uniform type: unsigned int
  RL_SHADER_UNIFORM_UIVEC2    ← 9   ⍝ Shader uniform type: uivec2 (2 unsigned int)
  RL_SHADER_UNIFORM_UIVEC3    ← 10  ⍝ Shader uniform type: uivec3 (3 unsigned int)
  RL_SHADER_UNIFORM_UIVEC4    ← 11  ⍝ Shader uniform type: uivec4 (4 unsigned int)
  RL_SHADER_UNIFORM_SAMPLER2D ← 12  ⍝ Shader uniform type: sampler2d
:EndNamespace

:Namespace rlShaderAttributeDataType ⍝ Shader attribute data types
  RL_SHADER_ATTRIB_FLOAT ← 0  ⍝ Shader attribute type: float
  RL_SHADER_ATTRIB_VEC2  ← 1  ⍝ Shader attribute type: vec2 (2 float)
  RL_SHADER_ATTRIB_VEC3  ← 2  ⍝ Shader attribute type: vec3 (3 float)
  RL_SHADER_ATTRIB_VEC4  ← 3  ⍝ Shader attribute type: vec4 (4 float)
:EndNamespace

:Namespace rlFramebufferAttachType ⍝ Framebuffer attachment type
  RL_ATTACHMENT_COLOR_CHANNEL0 ← 0    ⍝ Framebuffer attachment type: color 0
  RL_ATTACHMENT_COLOR_CHANNEL1 ← 1    ⍝ Framebuffer attachment type: color 1
  RL_ATTACHMENT_COLOR_CHANNEL2 ← 2    ⍝ Framebuffer attachment type: color 2
  RL_ATTACHMENT_COLOR_CHANNEL3 ← 3    ⍝ Framebuffer attachment type: color 3
  RL_ATTACHMENT_COLOR_CHANNEL4 ← 4    ⍝ Framebuffer attachment type: color 4
  RL_ATTACHMENT_COLOR_CHANNEL5 ← 5    ⍝ Framebuffer attachment type: color 5
  RL_ATTACHMENT_COLOR_CHANNEL6 ← 6    ⍝ Framebuffer attachment type: color 6
  RL_ATTACHMENT_COLOR_CHANNEL7 ← 7    ⍝ Framebuffer attachment type: color 7
  RL_ATTACHMENT_DEPTH          ← 100  ⍝ Framebuffer attachment type: depth
  RL_ATTACHMENT_STENCIL        ← 200  ⍝ Framebuffer attachment type: stencil
:EndNamespace

:Namespace rlFramebufferAttachTextureType ⍝ Framebuffer texture attachment type
  RL_ATTACHMENT_CUBEMAP_POSITIVE_X ← 0    ⍝ Framebuffer texture attachment type: cubemap, +X side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_X ← 1    ⍝ Framebuffer texture attachment type: cubemap, -X side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_Y ← 2    ⍝ Framebuffer texture attachment type: cubemap, +Y side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_Y ← 3    ⍝ Framebuffer texture attachment type: cubemap, -Y side
  RL_ATTACHMENT_CUBEMAP_POSITIVE_Z ← 4    ⍝ Framebuffer texture attachment type: cubemap, +Z side
  RL_ATTACHMENT_CUBEMAP_NEGATIVE_Z ← 5    ⍝ Framebuffer texture attachment type: cubemap, -Z side
  RL_ATTACHMENT_TEXTURE2D          ← 100  ⍝ Framebuffer texture attachment type: texture2d
  RL_ATTACHMENT_RENDERBUFFER       ← 200  ⍝ Framebuffer texture attachment type: renderbuffer
:EndNamespace

:Namespace rlCullMode ⍝ Face culling mode
  RL_CULL_FACE_FRONT ← 0  ⍝
  RL_CULL_FACE_BACK  ← 1  ⍝
:EndNamespace


bool ← 'I1'
c    ← 'I1'
i    ← 'I4'
f    ← 'F4'
u    ← 'U4'
i1   ← 'I1'
u1   ← 'U1'
u8   ← 'U8'
ptr  ← ,'P'
f8   ← 'F8'
i8   ← 'I8'
u2   ← 'U2'
ustr ← '=C1'
str  ← '=0C1'

Matrix ← ⍬ ⍝ Matrix, 4x4 components, column major, OpenGL style, right handed
  Matrix,←⊂ '⋄Matrix' ⍝      ⍝
  Matrix,←⊂ f         ⍝ m0   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m4   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m8   ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m12  ⍝ Matrix first row (4 components)
  Matrix,←⊂ f         ⍝ m1   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m5   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m9   ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m13  ⍝ Matrix second row (4 components)
  Matrix,←⊂ f         ⍝ m2   ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m6   ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m10  ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m14  ⍝ Matrix third row (4 components)
  Matrix,←⊂ f         ⍝ m3   ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f         ⍝ m7   ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f         ⍝ m11  ⍝ Matrix fourth row (4 components)
  Matrix,←⊂ f         ⍝ m15  ⍝ Matrix fourth row (4 components)

rlVertexBuffer ← ⍬ ⍝ Dynamic vertex buffers (position + texcoords + colors + indices arrays)
  rlVertexBuffer,←⊂ '⋄rlVertexBuffer' ⍝               ⍝
  rlVertexBuffer,←⊂ i                 ⍝ elementCount  ⍝ Number of elements in the buffer (QUADS)
  rlVertexBuffer,←⊂ '=',f             ⍝ vertices      ⍝ Vertex position (XYZ - 3 components per vertex) (shader-location = 0)
  rlVertexBuffer,←⊂ '=',f             ⍝ texcoords     ⍝ Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)
  rlVertexBuffer,←⊂ ustr              ⍝ colors        ⍝ Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)
  rlVertexBuffer,←⊂ '=',u             ⍝ indices       ⍝ Vertex indices (in case vertex data comes indexed) (6 indices per quad)
  rlVertexBuffer,←⊂ u                 ⍝ vaoId         ⍝ OpenGL Vertex Array Object id
  rlVertexBuffer,←⊂ u,'[4]'           ⍝ vboId         ⍝ OpenGL Vertex Buffer Objects id (4 types of vertex data)

rlDrawCall ← ⍬ ⍝ of those state-change happens (this is done in core module)
  rlDrawCall,←⊂ '⋄rlDrawCall' ⍝                  ⍝
  rlDrawCall,←⊂ i             ⍝ mode             ⍝ Drawing mode: LINES, TRIANGLES, QUADS
  rlDrawCall,←⊂ i             ⍝ vertexCount      ⍝ Number of vertex of the draw
  rlDrawCall,←⊂ i             ⍝ vertexAlignment  ⍝ Number of vertex required for index alignment (LINES, TRIANGLES)
  rlDrawCall,←⊂ u             ⍝ textureId        ⍝ Texture id to be used on the draw -> Use to create new draw call if changes

rlRenderBatch ← ⍬ ⍝ rlRenderBatch type
  rlRenderBatch,←⊂ '⋄rlRenderBatch'   ⍝                ⍝
  rlRenderBatch,←⊂ i                  ⍝ bufferCount    ⍝ Number of vertex buffers (multi-buffering support)
  rlRenderBatch,←⊂ i                  ⍝ currentBuffer  ⍝ Current buffer tracking in case of multi-buffering
  rlRenderBatch,←⊂ '=',rlVertexBuffer ⍝ vertexBuffer   ⍝ Dynamic buffer(s) for vertex data
  rlRenderBatch,←⊂ '=',rlDrawCall     ⍝ draws          ⍝ Draw calls array, depends on textureId
  rlRenderBatch,←⊂ i                  ⍝ drawCounter    ⍝ Draw calls counter
  rlRenderBatch,←⊂ f                  ⍝ currentDepth   ⍝ Current depth value for next draw
⍝ Mode is either 3:All changes, 2:only manual changes 1:only automatic changes, or 0: no changes
∇{mode} Init pathToRaylibDotAPLN ;import

pathToRaylibDotAPLN ← (⊢,'/'/⍨'/'≢⊃⍤⌽)(⊢,'.'/⍨0=≢⍤⊢),pathToRaylibDotAPLN

import ← 0 ⎕FIX pathToRaylibDotAPLN,'../non-link/setup.apln.hide'
'' ⎕NS 'import.'∘,¨import.⎕NL-2 3 9
⎕EX 'import'

pathToBinary ← lib
:If 0=⎕NC 'mode'
  mode ← 3 ⍝ Default is All changes
:EndIf


rlMatrixModeRAYLIB                       ←               R('rlMatrixModeRetPtr'                       (,⊂ i                     )) ⍝ mode                                                                 ⍝ Choose the current matrix to be transformed
rlPushMatrixRAYLIB                       ←               R('rlPushMatrixRetPtr'                       (⍬                        )) ⍝                                                                      ⍝ Push the current matrix to stack
rlPopMatrixRAYLIB                        ←               R('rlPopMatrixRetPtr'                        (⍬                        )) ⍝                                                                      ⍝ Pop latest inserted matrix from stack
rlLoadIdentityRAYLIB                     ←               R('rlLoadIdentityRetPtr'                     (⍬                        )) ⍝                                                                      ⍝ Reset current matrix to identity matrix
rlTranslatefRAYLIB                       ←               R('rlTranslatefRetPtr'                       (f f f                    )) ⍝ x y z                                                                ⍝ Multiply the current matrix by a translation matrix
rlRotatefRAYLIB                          ←               R('rlRotatefRetPtr'                          (f f f f                  )) ⍝ angle x y z                                                          ⍝ Multiply the current matrix by a rotation matrix
rlScalefRAYLIB                           ←               R('rlScalefRetPtr'                           (f f f                    )) ⍝ x y z                                                                ⍝ Multiply the current matrix by a scaling matrix
rlMultMatrixfRAYLIB                      ←               R('rlMultMatrixfRetPtr'                      (,⊂ ('<',f)               )) ⍝ matf                                                                 ⍝ Multiply the current matrix by another matrix
rlFrustumRAYLIB                          ←               R('rlFrustumRetPtr'                          (f8 f8 f8 f8 f8 f8        )) ⍝ left right bottom top znear zfar                                     ⍝
rlOrthoRAYLIB                            ←               R('rlOrthoRetPtr'                            (f8 f8 f8 f8 f8 f8        )) ⍝ left right bottom top znear zfar                                     ⍝
rlViewportRAYLIB                         ←               R('rlViewportRetPtr'                         (i i i i                  )) ⍝ x y width height                                                     ⍝ Set the viewport area
rlSetClipPlanesRAYLIB                    ←               R('rlSetClipPlanesRetPtr'                    (f8 f8                    )) ⍝ nearPlane farPlane                                                   ⍝ Set clip planes distances
rlGetCullDistanceNearRAYLIB              ←               R('rlGetCullDistanceNearRetPtr'              (,⊂ ('>',f8)              )) ⍝                                                                      ⍝ Get cull plane distance near
rlGetCullDistanceFarRAYLIB               ←               R('rlGetCullDistanceFarRetPtr'               (,⊂ ('>',f8)              )) ⍝                                                                      ⍝ Get cull plane distance far
rlBeginRAYLIB                            ←               R('rlBeginRetPtr'                            (,⊂ i                     )) ⍝ mode                                                                 ⍝ Initialize drawing mode (how to organize vertex)
rlEndRAYLIB                              ←               R('rlEndRetPtr'                              (⍬                        )) ⍝                                                                      ⍝ Finish vertex providing
rlVertex2iRAYLIB                         ←               R('rlVertex2iRetPtr'                         (i i                      )) ⍝ x y                                                                  ⍝ Define one vertex (position) - 2 int
rlVertex2fRAYLIB                         ←               R('rlVertex2fRetPtr'                         (f f                      )) ⍝ x y                                                                  ⍝ Define one vertex (position) - 2 float
rlVertex3fRAYLIB                         ←               R('rlVertex3fRetPtr'                         (f f f                    )) ⍝ x y z                                                                ⍝ Define one vertex (position) - 3 float
rlTexCoord2fRAYLIB                       ←               R('rlTexCoord2fRetPtr'                       (f f                      )) ⍝ x y                                                                  ⍝ Define one vertex (texture coordinate) - 2 float
rlNormal3fRAYLIB                         ←               R('rlNormal3fRetPtr'                         (f f f                    )) ⍝ x y z                                                                ⍝ Define one vertex (normal) - 3 float
rlColor4ubRAYLIB                         ←               R('rlColor4ubRetPtr'                         (u1 u1 u1 u1              )) ⍝ r g b a                                                              ⍝ Define one vertex (color) - 4 byte
rlColor3fRAYLIB                          ←               R('rlColor3fRetPtr'                          (f f f                    )) ⍝ x y z                                                                ⍝ Define one vertex (color) - 3 float
rlColor4fRAYLIB                          ←               R('rlColor4fRetPtr'                          (f f f f                  )) ⍝ x y z w                                                              ⍝ Define one vertex (color) - 4 float
rlEnableVertexArrayRAYLIB                ←               R('rlEnableVertexArrayRetPtr'                (('>',bool) u             )) ⍝ vaoId                                                                ⍝ Enable vertex array (VAO, if supported)
rlDisableVertexArrayRAYLIB               ←               R('rlDisableVertexArrayRetPtr'               (⍬                        )) ⍝                                                                      ⍝ Disable vertex array (VAO, if supported)
rlEnableVertexBufferRAYLIB               ←               R('rlEnableVertexBufferRetPtr'               (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable vertex buffer (VBO)
rlDisableVertexBufferRAYLIB              ←               R('rlDisableVertexBufferRetPtr'              (⍬                        )) ⍝                                                                      ⍝ Disable vertex buffer (VBO)
rlEnableVertexBufferElementRAYLIB        ←               R('rlEnableVertexBufferElementRetPtr'        (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable vertex buffer element (VBO element)
rlDisableVertexBufferElementRAYLIB       ←               R('rlDisableVertexBufferElementRetPtr'       (⍬                        )) ⍝                                                                      ⍝ Disable vertex buffer element (VBO element)
rlEnableVertexAttributeRAYLIB            ←               R('rlEnableVertexAttributeRetPtr'            (,⊂ u                     )) ⍝ index                                                                ⍝ Enable vertex attribute index
rlDisableVertexAttributeRAYLIB           ←               R('rlDisableVertexAttributeRetPtr'           (,⊂ u                     )) ⍝ index                                                                ⍝ Disable vertex attribute index
rlActiveTextureSlotRAYLIB                ←               R('rlActiveTextureSlotRetPtr'                (,⊂ i                     )) ⍝ slot                                                                 ⍝ Select and active a texture slot
rlEnableTextureRAYLIB                    ←               R('rlEnableTextureRetPtr'                    (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable texture
rlDisableTextureRAYLIB                   ←               R('rlDisableTextureRetPtr'                   (⍬                        )) ⍝                                                                      ⍝ Disable texture
rlEnableTextureCubemapRAYLIB             ←               R('rlEnableTextureCubemapRetPtr'             (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable texture cubemap
rlDisableTextureCubemapRAYLIB            ←               R('rlDisableTextureCubemapRetPtr'            (⍬                        )) ⍝                                                                      ⍝ Disable texture cubemap
rlTextureParametersRAYLIB                ←               R('rlTextureParametersRetPtr'                (u i i                    )) ⍝ id param value                                                       ⍝ Set texture parameters (filter, wrap)
rlCubemapParametersRAYLIB                ←               R('rlCubemapParametersRetPtr'                (u i i                    )) ⍝ id param value                                                       ⍝ Set cubemap parameters (filter, wrap)
rlEnableShaderRAYLIB                     ←               R('rlEnableShaderRetPtr'                     (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable shader program
rlDisableShaderRAYLIB                    ←               R('rlDisableShaderRetPtr'                    (⍬                        )) ⍝                                                                      ⍝ Disable shader program
rlEnableFramebufferRAYLIB                ←               R('rlEnableFramebufferRetPtr'                (,⊂ u                     )) ⍝ id                                                                   ⍝ Enable render texture (fbo)
rlDisableFramebufferRAYLIB               ←               R('rlDisableFramebufferRetPtr'               (⍬                        )) ⍝                                                                      ⍝ Disable render texture (fbo), return to default framebuffer
rlGetActiveFramebufferRAYLIB             ←               R('rlGetActiveFramebufferRetPtr'             (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Get the currently active render texture (fbo), 0 for default framebuffer
rlActiveDrawBuffersRAYLIB                ←               R('rlActiveDrawBuffersRetPtr'                (,⊂ i                     )) ⍝ count                                                                ⍝ Activate multiple draw color buffers
rlBlitFramebufferRAYLIB                  ←               R('rlBlitFramebufferRetPtr'                  (i i i i i i i i i        )) ⍝ srcX srcY srcWidth srcHeight dstX dstY dstWidth dstHeight bufferMask ⍝ Blit active framebuffer to main framebuffer
rlBindFramebufferRAYLIB                  ←               R('rlBindFramebufferRetPtr'                  (u u                      )) ⍝ target framebuffer                                                   ⍝ Bind framebuffer (FBO)
rlEnableColorBlendRAYLIB                 ←               R('rlEnableColorBlendRetPtr'                 (⍬                        )) ⍝                                                                      ⍝ Enable color blending
rlDisableColorBlendRAYLIB                ←               R('rlDisableColorBlendRetPtr'                (⍬                        )) ⍝                                                                      ⍝ Disable color blending
rlEnableDepthTestRAYLIB                  ←               R('rlEnableDepthTestRetPtr'                  (⍬                        )) ⍝                                                                      ⍝ Enable depth test
rlDisableDepthTestRAYLIB                 ←               R('rlDisableDepthTestRetPtr'                 (⍬                        )) ⍝                                                                      ⍝ Disable depth test
rlEnableDepthMaskRAYLIB                  ←               R('rlEnableDepthMaskRetPtr'                  (⍬                        )) ⍝                                                                      ⍝ Enable depth write
rlDisableDepthMaskRAYLIB                 ←               R('rlDisableDepthMaskRetPtr'                 (⍬                        )) ⍝                                                                      ⍝ Disable depth write
rlEnableBackfaceCullingRAYLIB            ←               R('rlEnableBackfaceCullingRetPtr'            (⍬                        )) ⍝                                                                      ⍝ Enable backface culling
rlDisableBackfaceCullingRAYLIB           ←               R('rlDisableBackfaceCullingRetPtr'           (⍬                        )) ⍝                                                                      ⍝ Disable backface culling
rlColorMaskRAYLIB                        ←               R('rlColorMaskRetPtr'                        (bool bool bool bool      )) ⍝ r g b a                                                              ⍝ Color mask control
rlSetCullFaceRAYLIB                      ←               R('rlSetCullFaceRetPtr'                      (,⊂ i                     )) ⍝ mode                                                                 ⍝ Set face culling mode
rlEnableScissorTestRAYLIB                ←               R('rlEnableScissorTestRetPtr'                (⍬                        )) ⍝                                                                      ⍝ Enable scissor test
rlDisableScissorTestRAYLIB               ←               R('rlDisableScissorTestRetPtr'               (⍬                        )) ⍝                                                                      ⍝ Disable scissor test
rlScissorRAYLIB                          ←               R('rlScissorRetPtr'                          (i i i i                  )) ⍝ x y width height                                                     ⍝ Scissor test
rlEnableWireModeRAYLIB                   ←               R('rlEnableWireModeRetPtr'                   (⍬                        )) ⍝                                                                      ⍝ Enable wire mode
rlEnablePointModeRAYLIB                  ←               R('rlEnablePointModeRetPtr'                  (⍬                        )) ⍝                                                                      ⍝ Enable point mode
rlDisableWireModeRAYLIB                  ←               R('rlDisableWireModeRetPtr'                  (⍬                        )) ⍝                                                                      ⍝ Disable wire (and point) mode
rlSetLineWidthRAYLIB                     ←               R('rlSetLineWidthRetPtr'                     (,⊂ f                     )) ⍝ width                                                                ⍝ Set the line drawing width
rlGetLineWidthRAYLIB                     ←               R('rlGetLineWidthRetPtr'                     (,⊂ ('>',f)               )) ⍝                                                                      ⍝ Get the line drawing width
rlEnableSmoothLinesRAYLIB                ←               R('rlEnableSmoothLinesRetPtr'                (⍬                        )) ⍝                                                                      ⍝ Enable line aliasing
rlDisableSmoothLinesRAYLIB               ←               R('rlDisableSmoothLinesRetPtr'               (⍬                        )) ⍝                                                                      ⍝ Disable line aliasing
rlEnableStereoRenderRAYLIB               ←               R('rlEnableStereoRenderRetPtr'               (⍬                        )) ⍝                                                                      ⍝ Enable stereo rendering
rlDisableStereoRenderRAYLIB              ←               R('rlDisableStereoRenderRetPtr'              (⍬                        )) ⍝                                                                      ⍝ Disable stereo rendering
rlIsStereoRenderEnabledRAYLIB            ←               R('rlIsStereoRenderEnabledRetPtr'            (,⊂ ('>',bool)            )) ⍝                                                                      ⍝ Check if stereo render is enabled
rlClearColorRAYLIB                       ←               R('rlClearColorRetPtr'                       (u1 u1 u1 u1              )) ⍝ r g b a                                                              ⍝ Clear color buffer with color
rlClearScreenBuffersRAYLIB               ←               R('rlClearScreenBuffersRetPtr'               (⍬                        )) ⍝                                                                      ⍝ Clear used screen buffers (color and depth)
rlCheckErrorsRAYLIB                      ←               R('rlCheckErrorsRetPtr'                      (⍬                        )) ⍝                                                                      ⍝ Check and log OpenGL error codes
rlSetBlendModeRAYLIB                     ←               R('rlSetBlendModeRetPtr'                     (,⊂ i                     )) ⍝ mode                                                                 ⍝ Set blending mode
rlSetBlendFactorsRAYLIB                  ←               R('rlSetBlendFactorsRetPtr'                  (i i i                    )) ⍝ glSrcFactor glDstFactor glEquation                                   ⍝ Set blending mode factor and equation (using OpenGL factors)
rlSetBlendFactorsSeparateRAYLIB          ←               R('rlSetBlendFactorsSeparateRetPtr'          (i i i i i i              )) ⍝ glSrcRGB glDstRGB glSrcAlpha glDstAlpha glEqRGB glEqAlpha            ⍝ Set blending mode factors and equations separately (using OpenGL factors)
rlglInitRAYLIB                           ←               R('rlglInitRetPtr'                           (i i                      )) ⍝ width height                                                         ⍝ Initialize rlgl (buffers, shaders, textures, states)
rlglCloseRAYLIB                          ←               R('rlglCloseRetPtr'                          (⍬                        )) ⍝                                                                      ⍝ De-initialize rlgl (buffers, shaders, textures)
rlLoadExtensionsRAYLIB                   ←               R('rlLoadExtensionsRetPtr'                   (,⊂ ptr                   )) ⍝ loader                                                               ⍝ Load OpenGL extensions (loader function required)
rlGetVersionRAYLIB                       ←               R('rlGetVersionRetPtr'                       (,⊂ ('>',i)               )) ⍝                                                                      ⍝ Get current OpenGL version
rlSetFramebufferWidthRAYLIB              ←               R('rlSetFramebufferWidthRetPtr'              (,⊂ i                     )) ⍝ width                                                                ⍝ Set current framebuffer width
rlGetFramebufferWidthRAYLIB              ←               R('rlGetFramebufferWidthRetPtr'              (,⊂ ('>',i)               )) ⍝                                                                      ⍝ Get default framebuffer width
rlSetFramebufferHeightRAYLIB             ←               R('rlSetFramebufferHeightRetPtr'             (,⊂ i                     )) ⍝ height                                                               ⍝ Set current framebuffer height
rlGetFramebufferHeightRAYLIB             ←               R('rlGetFramebufferHeightRetPtr'             (,⊂ ('>',i)               )) ⍝                                                                      ⍝ Get default framebuffer height
rlGetTextureIdDefaultRAYLIB              ←               R('rlGetTextureIdDefaultRetPtr'              (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Get default texture id
rlGetShaderIdDefaultRAYLIB               ←               R('rlGetShaderIdDefaultRetPtr'               (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Get default shader id
rlGetShaderLocsDefaultRAYLIB             ←               R('rlGetShaderLocsDefaultRetPtr'             (,⊂ ptr                   )) ⍝                                                                      ⍝ Get default shader locations
rlLoadRenderBatchRAYLIB                  ←               R('rlLoadRenderBatchRetPtr'                  (('>',rlRenderBatch) i i  )) ⍝ numBuffers bufferElements                                            ⍝ Load a render batch system
rlUnloadRenderBatchRAYLIB                ←               R('rlUnloadRenderBatchRetPtr'                (,⊂ rlRenderBatch         )) ⍝ batch                                                                ⍝ Unload render batch system
rlDrawRenderBatchRAYLIB                  ←               R('rlDrawRenderBatchRetPtr'                  (,⊂ ('=',rlRenderBatch)   )) ⍝ batch                                                                ⍝ Draw render batch data (Update->Draw->Reset)
rlSetRenderBatchActiveRAYLIB             ←               R('rlSetRenderBatchActiveRetPtr'             (,⊂ ('=',rlRenderBatch)   )) ⍝ batch                                                                ⍝ Set the active render batch for rlgl (NULL for default internal)
rlDrawRenderBatchActiveRAYLIB            ←               R('rlDrawRenderBatchActiveRetPtr'            (⍬                        )) ⍝                                                                      ⍝ Update and draw internal render batch
rlCheckRenderBatchLimitRAYLIB            ←               R('rlCheckRenderBatchLimitRetPtr'            (('>',bool) i             )) ⍝ vCount                                                               ⍝ Check internal buffer overflow for a given number of vertex
rlSetTextureRAYLIB                       ←               R('rlSetTextureRetPtr'                       (,⊂ u                     )) ⍝ id                                                                   ⍝ Set current texture for render batch and check buffers limits
rlLoadVertexArrayRAYLIB                  ←               R('rlLoadVertexArrayRetPtr'                  (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Load vertex array (vao) if supported
rlLoadVertexBufferRAYLIB                 ←               R('rlLoadVertexBufferRetPtr'                 (('>',u) ptr i bool       )) ⍝ buffer size dynamic                                                  ⍝ Load a vertex buffer object
rlLoadVertexBufferElementRAYLIB          ←               R('rlLoadVertexBufferElementRetPtr'          (('>',u) ptr i bool       )) ⍝ buffer size dynamic                                                  ⍝ Load vertex buffer elements object
rlUpdateVertexBufferRAYLIB               ←               R('rlUpdateVertexBufferRetPtr'               (u ptr i i                )) ⍝ bufferId data dataSize offset                                        ⍝ Update vertex buffer object data on GPU buffer
rlUpdateVertexBufferElementsRAYLIB       ←               R('rlUpdateVertexBufferElementsRetPtr'       (u ptr i i                )) ⍝ id data dataSize offset                                              ⍝ Update vertex buffer elements data on GPU buffer
rlUnloadVertexArrayRAYLIB                ←               R('rlUnloadVertexArrayRetPtr'                (,⊂ u                     )) ⍝ vaoId                                                                ⍝ Unload vertex array (vao)
rlUnloadVertexBufferRAYLIB               ←               R('rlUnloadVertexBufferRetPtr'               (,⊂ u                     )) ⍝ vboId                                                                ⍝ Unload vertex buffer object
rlSetVertexAttributeRAYLIB               ←               R('rlSetVertexAttributeRetPtr'               (u i i bool i i           )) ⍝ index compSize type normalized stride offset                         ⍝ Set vertex attribute data configuration
rlSetVertexAttributeDivisorRAYLIB        ←               R('rlSetVertexAttributeDivisorRetPtr'        (u i                      )) ⍝ index divisor                                                        ⍝ Set vertex attribute data divisor
rlSetVertexAttributeDefaultRAYLIB        ←               R('rlSetVertexAttributeDefaultRetPtr'        (i ptr i i                )) ⍝ locIndex value attribType count                                      ⍝ Set vertex attribute default value, when attribute to provided
rlDrawVertexArrayRAYLIB                  ←               R('rlDrawVertexArrayRetPtr'                  (i i                      )) ⍝ offset count                                                         ⍝ Draw vertex array (currently active vao)
rlDrawVertexArrayElementsRAYLIB          ←               R('rlDrawVertexArrayElementsRetPtr'          (i i ptr                  )) ⍝ offset count buffer                                                  ⍝ Draw vertex array elements
rlDrawVertexArrayInstancedRAYLIB         ←               R('rlDrawVertexArrayInstancedRetPtr'         (i i i                    )) ⍝ offset count instances                                               ⍝ Draw vertex array (currently active vao) with instancing
rlDrawVertexArrayElementsInstancedRAYLIB ←               R('rlDrawVertexArrayElementsInstancedRetPtr' (i i ptr i                )) ⍝ offset count buffer instances                                        ⍝ Draw vertex array elements with instancing
rlLoadTextureRAYLIB                      ←               R('rlLoadTextureRetPtr'                      (('>',u) ptr i i i i      )) ⍝ data width height format mipmapCount                                 ⍝ Load texture data
rlLoadTextureDepthRAYLIB                 ←               R('rlLoadTextureDepthRetPtr'                 (('>',u) i i bool         )) ⍝ width height useRenderBuffer                                         ⍝ Load depth texture/renderbuffer (to be attached to fbo)
rlLoadTextureCubemapRAYLIB               ←               R('rlLoadTextureCubemapRetPtr'               (('>',u) ptr i i i        )) ⍝ data size format mipmapCount                                         ⍝ Load texture cubemap data
rlUpdateTextureRAYLIB                    ←               R('rlUpdateTextureRetPtr'                    (u i i i i i ptr          )) ⍝ id offsetX offsetY width height format data                          ⍝ Update texture with new data on GPU
rlGetGlTextureFormatsRAYLIB              ←               R('rlGetGlTextureFormatsRetPtr'              (i ('=',u) ('=',u) ('=',u))) ⍝ format glInternalFormat glFormat glType                              ⍝ Get OpenGL internal formats
rlGetPixelFormatNameRAYLIB               ←               R('rlGetPixelFormatNameRetPtr'               (('>',str) u              )) ⍝ format                                                               ⍝ Get name string for pixel format
rlUnloadTextureRAYLIB                    ←               R('rlUnloadTextureRetPtr'                    (,⊂ u                     )) ⍝ id                                                                   ⍝ Unload texture from GPU memory
rlGenTextureMipmapsRAYLIB                ←               R('rlGenTextureMipmapsRetPtr'                (u i i i ('=',i)          )) ⍝ id width height format mipmaps                                       ⍝ Generate mipmap data for selected texture
rlReadTexturePixelsRAYLIB                ←               R('rlReadTexturePixelsRetPtr'                (('>',ptr) u i i i        )) ⍝ id width height format                                               ⍝ Read texture pixel data
rlReadScreenPixelsRAYLIB                 ←               R('rlReadScreenPixelsRetPtr'                 (('>',ustr) i i           )) ⍝ width height                                                         ⍝ Read screen pixel data (color buffer)
rlLoadFramebufferRAYLIB                  ←               R('rlLoadFramebufferRetPtr'                  (,⊂ ('>',u)               )) ⍝                                                                      ⍝ Load an empty framebuffer
rlFramebufferAttachRAYLIB                ←               R('rlFramebufferAttachRetPtr'                (u u i i i                )) ⍝ fboId texId attachType texType mipLevel                              ⍝ Attach texture/renderbuffer to a framebuffer
rlFramebufferCompleteRAYLIB              ←               R('rlFramebufferCompleteRetPtr'              (('>',bool) u             )) ⍝ id                                                                   ⍝ Verify framebuffer is complete
rlUnloadFramebufferRAYLIB                ←               R('rlUnloadFramebufferRetPtr'                (,⊂ u                     )) ⍝ id                                                                   ⍝ Delete framebuffer from GPU
rlLoadShaderCodeRAYLIB                   ←               R('rlLoadShaderCodeRetPtr'                   (('>',u) str str          )) ⍝ vsCode fsCode                                                        ⍝ Load shader from code strings
rlCompileShaderRAYLIB                    ←               R('rlCompileShaderRetPtr'                    (('>',u) str i            )) ⍝ shaderCode type                                                      ⍝ Compile custom shader and return shader id (type: RL_VERTEX_SHADER, RL_FRAGMENT_SHADER, RL_COMPUTE_SHADER)
rlLoadShaderProgramRAYLIB                ←               R('rlLoadShaderProgramRetPtr'                (('>',u) u u              )) ⍝ vShaderId fShaderId                                                  ⍝ Load custom shader program
rlUnloadShaderProgramRAYLIB              ←               R('rlUnloadShaderProgramRetPtr'              (,⊂ u                     )) ⍝ id                                                                   ⍝ Unload shader program
rlGetLocationUniformRAYLIB               ←               R('rlGetLocationUniformRetPtr'               (('>',i) u str            )) ⍝ shaderId uniformName                                                 ⍝ Get shader location uniform
rlGetLocationAttribRAYLIB                ←               R('rlGetLocationAttribRetPtr'                (('>',i) u str            )) ⍝ shaderId attribName                                                  ⍝ Get shader location attribute
rlSetUniformRAYLIB                       ←               R('rlSetUniformRetPtr'                       (i ptr i i                )) ⍝ locIndex value uniformType count                                     ⍝ Set shader value uniform
rlSetUniformMatrixRAYLIB                 ←               R('rlSetUniformMatrixRetPtr'                 (i Matrix                 )) ⍝ locIndex mat                                                         ⍝ Set shader value matrix
rlSetUniformMatricesRAYLIB               ←               R('rlSetUniformMatricesRetPtr'               (i ('<',Matrix) i         )) ⍝ locIndex mat count                                                   ⍝ Set shader value matrices
rlSetUniformSamplerRAYLIB                ←               R('rlSetUniformSamplerRetPtr'                (i u                      )) ⍝ locIndex textureId                                                   ⍝ Set shader value sampler
rlSetShaderRAYLIB                        ←               R('rlSetShaderRetPtr'                        (u ('=',i)                )) ⍝ id locs                                                              ⍝ Set shader currently active (id and locations)
rlLoadComputeShaderProgramRAYLIB         ←               R('rlLoadComputeShaderProgramRetPtr'         (('>',u) u                )) ⍝ shaderId                                                             ⍝ Load compute shader program
rlComputeShaderDispatchRAYLIB            ←               R('rlComputeShaderDispatchRetPtr'            (u u u                    )) ⍝ groupX groupY groupZ                                                 ⍝ Dispatch compute shader (equivalent to *draw* for graphics pipeline)
rlLoadShaderBufferRAYLIB                 ←               R('rlLoadShaderBufferRetPtr'                 (('>',u) u ptr i          )) ⍝ size data usageHint                                                  ⍝ Load shader storage buffer object (SSBO)
rlUnloadShaderBufferRAYLIB               ←               R('rlUnloadShaderBufferRetPtr'               (,⊂ u                     )) ⍝ ssboId                                                               ⍝ Unload shader storage buffer object (SSBO)
rlUpdateShaderBufferRAYLIB               ←               R('rlUpdateShaderBufferRetPtr'               (u ptr u u                )) ⍝ id data dataSize offset                                              ⍝ Update SSBO buffer data
rlBindShaderBufferRAYLIB                 ←               R('rlBindShaderBufferRetPtr'                 (u u                      )) ⍝ id index                                                             ⍝ Bind SSBO buffer
rlReadShaderBufferRAYLIB                 ←               R('rlReadShaderBufferRetPtr'                 (u ptr u u                )) ⍝ id dest count offset                                                 ⍝ Read SSBO buffer data (GPU->CPU)
rlCopyShaderBufferRAYLIB                 ←               R('rlCopyShaderBufferRetPtr'                 (u u u u u                )) ⍝ destId srcId destOffset srcOffset count                              ⍝ Copy SSBO data between buffers
rlGetShaderBufferSizeRAYLIB              ←               R('rlGetShaderBufferSizeRetPtr'              (('>',u) u                )) ⍝ id                                                                   ⍝ Get SSBO buffer size
rlBindImageTextureRAYLIB                 ←               R('rlBindImageTextureRetPtr'                 (u u i bool               )) ⍝ id index format readonly                                             ⍝ Bind image texture
rlGetMatrixModelviewRAYLIB               ←               R('rlGetMatrixModelviewRetPtr'               (,⊂ ('>',Matrix)          )) ⍝                                                                      ⍝ Get internal modelview matrix
rlGetMatrixProjectionRAYLIB              ←               R('rlGetMatrixProjectionRetPtr'              (,⊂ ('>',Matrix)          )) ⍝                                                                      ⍝ Get internal projection matrix
rlGetMatrixTransformRAYLIB               ←               R('rlGetMatrixTransformRetPtr'               (,⊂ ('>',Matrix)          )) ⍝                                                                      ⍝ Get internal accumulated transform matrix
rlGetMatrixProjectionStereoRAYLIB        ←               R('rlGetMatrixProjectionStereoRetPtr'        (('>',Matrix) i           )) ⍝ eye                                                                  ⍝ Get internal projection matrix for stereo render (selected eye)
rlGetMatrixViewOffsetStereoRAYLIB        ←               R('rlGetMatrixViewOffsetStereoRetPtr'        (('>',Matrix) i           )) ⍝ eye                                                                  ⍝ Get internal view offset matrix for stereo render (selected eye)
rlSetMatrixProjectionRAYLIB              ←               R('rlSetMatrixProjectionRetPtr'              (,⊂ Matrix                )) ⍝ proj                                                                 ⍝ Set a custom projection matrix (replaces internal projection matrix)
rlSetMatrixModelviewRAYLIB               ←               R('rlSetMatrixModelviewRetPtr'               (,⊂ Matrix                )) ⍝ view                                                                 ⍝ Set a custom modelview matrix (replaces internal modelview matrix)
rlSetMatrixProjectionStereoRAYLIB        ←               R('rlSetMatrixProjectionStereoRetPtr'        (Matrix Matrix            )) ⍝ right left                                                           ⍝ Set eyes projection matrices for stereo rendering
rlSetMatrixViewOffsetStereoRAYLIB        ←               R('rlSetMatrixViewOffsetStereoRetPtr'        (Matrix Matrix            )) ⍝ right left                                                           ⍝ Set eyes view offsets matrices for stereo rendering
rlLoadDrawCubeRAYLIB                     ←               R('rlLoadDrawCubeRetPtr'                     (⍬                        )) ⍝                                                                      ⍝ Load and draw a cube
rlLoadDrawQuadRAYLIB                     ←               R('rlLoadDrawQuadRetPtr'                     (⍬                        )) ⍝                                                                      ⍝ Load and draw a quad
AfterDefaultDefinitions mode 'rlglReplacement.apln.hide'
∇
:EndNamespace
